{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e67011ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator\n",
    "import random\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as sp\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "\n",
    "from itertools import product\n",
    "from collections import namedtuple\n",
    "from abc import ABC, abstractmethod\n",
    "from scipy.stats import beta\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import Lasso, Ridge\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.preprocessing import normalize\n",
    "\n",
    "from tqdm import tqdm\n",
    "\n",
    "%matplotlib inline\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4bd13d2",
   "metadata": {},
   "source": [
    "# Необходимые функции и классы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a92b5080",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_spec(spec):\n",
    "    \n",
    "    env_spec = spec['env']\n",
    "    n_experiments = spec['n_experiments']\n",
    "    n_action = env_spec['n_action']\n",
    "    n_iter = env_spec['n_iter']\n",
    "    env = Environment(bandits = BANDITS, **env_spec)\n",
    "    alg_cnt = len(spec['alg'])\n",
    "    results = [{\n",
    "                'mean_reward': np.zeros(n_iter), \n",
    "                'mean_regret': np.zeros(n_iter), \n",
    "                'total_cnt': np.zeros(n_action),\n",
    "                'cumulative_reward': np.zeros(n_iter),\n",
    "                'actions_history': np.zeros((n_iter, n_action))\n",
    "                } for i in range(alg_cnt)]\n",
    "    \n",
    "    for i in tqdm(range(n_experiments)):\n",
    "        for a in range(alg_cnt):      \n",
    "            bandit, _, _,  mean_rewards, mean_regrets, cumulative_reward, ids = \\\n",
    "                Experiment.run(env, generate_stats=False, **spec['alg'][a])\n",
    "            results[a]['mean_reward']  = results[a]['mean_reward'] + (mean_rewards - results[a]['mean_reward']) / (i + 1)\n",
    "            results[a]['mean_regret']  = results[a]['mean_regret'] + (mean_regrets - results[a]['mean_regret']) / (i + 1)\n",
    "            results[a]['total_cnt']  = results[a]['total_cnt'] + (bandit.bandit_cnt - results[a]['total_cnt']) / (i + 1)\n",
    "            results[a]['cumulative_reward']  = results[a]['cumulative_reward'] + (cumulative_reward - results[a]['cumulative_reward']) / (i + 1)\n",
    "\n",
    "            for j, action_id in enumerate(ids):\n",
    "                results[a]['actions_history'][j][action_id] += 1\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "d50d90e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Bandit:\n",
    "    __type__ = 'base'\n",
    "    \n",
    "    def __init__(self, action_cnt, **kwargs):\n",
    "        assert action_cnt > 0, \"Number of action must be greater than zero!\"\n",
    "        \n",
    "        self.action_cnt = action_cnt\n",
    "        self.reward_cnt = np.array([0.] * self.action_cnt)\n",
    "        self.bandit_cnt = np.array([0] * self.action_cnt)\n",
    "        self.regrets =  np.array([0.])\n",
    "        self.reward_estimate = np.array([0.0] * self.action_cnt)\n",
    "        self.mean_reward = 0.\n",
    "        self.mean_regret = 0.\n",
    "        self.accuracy = 0.\n",
    "        self.pull_cnt = 0\n",
    "        \n",
    "    def update_estimates(self, a, r, regret, get_correct, **kwargs):\n",
    "        self.bandit_cnt[a] += 1\n",
    "        self.reward_cnt[a] += r\n",
    "        np.append(self.regrets, regret)\n",
    "        self.reward_estimate[a] = self.reward_estimate[a] + 1 / (self.bandit_cnt[a] + 1) * (r - self.reward_estimate[a])\n",
    "        \n",
    "        self.mean_reward = self.mean_reward + (r - self.mean_reward) / (self.pull_cnt + 1)\n",
    "        self.mean_regret = self.mean_regret + (regret - self.mean_regret) / (self.pull_cnt + 1)\n",
    "        self.accuracy = self.accuracy + (get_correct - self.accuracy) / (self.pull_cnt + 1)\n",
    "        \n",
    "    @abstractmethod\n",
    "    def pull(self):\n",
    "        pass\n",
    "    \n",
    "    def generate_stats(self, total_reward, total_regret, **kwrags):\n",
    "        print('='*20,'STATS', '='*20)\n",
    "        print(f'Type of the bandit: {self.__type__}'.center(20))\n",
    "        print(f'Total reward: {total_reward}')\n",
    "        print(f'Total regret: {total_regret}')\n",
    "        print(f'Accuracy: {self.accuracy}')\n",
    "        print(f'Bandits pull count: {self.bandit_cnt}')\n",
    "        print(f'Reward from all bandit: {self.reward_cnt}')\n",
    "        print(f'Reward estimate all bandit: {self.reward_estimate}')\n",
    "        print('='*47)\n",
    "    \n",
    "class RandomBandit(Bandit):\n",
    "    __type__ = 'random'\n",
    "    \n",
    "    def __init__(self, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        \n",
    "    def pull(self, **kwargs):\n",
    "        a = np.random.randint(0, self.action_cnt)\n",
    "        self.pull_cnt += 1\n",
    "        return a\n",
    "    \n",
    "class UCB1_Bandit(Bandit):\n",
    "    __type__ = 'ucb1'\n",
    "    \n",
    "    def __init__(self, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        \n",
    "        \n",
    "    def pull(self, **kwargs):\n",
    "        # сначала хотя бы раз пробуем каждый вариант\n",
    "        for i in range(self.action_cnt):\n",
    "            if self.bandit_cnt[i] == 0:\n",
    "                return i\n",
    "        total_cnt = np.sum(self.bandit_cnt)\n",
    "        a = np.argmax(self.reward_estimate + np.sqrt(2 * np.log(total_cnt) / self.bandit_cnt))\n",
    "        self.pull_cnt += 1\n",
    "        return a\n",
    "    \n",
    "    def generate_stats(self, total_reward, total_regret, **kwrags):\n",
    "        print('='*20,'STATS', '='*20)\n",
    "        print(f'Type of the bandit: {self.__type__}'.center(20))\n",
    "        print(f'Total reward: {total_reward}')\n",
    "        print(f'Total regret: {total_regret}')\n",
    "        print(f'Accuracy: {self.accuracy}')\n",
    "        print(f'Bandits pull count: {self.bandit_cnt}')\n",
    "        print(f'Reward from all bandit: {self.reward_cnt}')\n",
    "        print(f'Reward estimate all bandit: {self.reward_estimate}')\n",
    "        print('='*47)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "36a6dfa2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinUCB(Bandit):\n",
    "    __type__ = 'lin_ucb'\n",
    "    \n",
    "    def __init__(self, n_dims, alpha = 0.01, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        self.alpha = alpha\n",
    "        self.n_dims = n_dims\n",
    "        self.A = np.zeros((self.action_cnt, self.n_dims, self.n_dims))\n",
    "        self.b = np.zeros((self.action_cnt, self.n_dims, 1))\n",
    "        \n",
    "        for action in range(self.action_cnt):\n",
    "            self.A[action] = np.eye(self.n_dims)\n",
    "            \n",
    "        self.theta_hat = None\n",
    "        \n",
    "    def pull(self, context):\n",
    "        inv_a = np.linalg.inv(self.A)\n",
    "        self.theta_hat = inv_a @ self.b\n",
    "        p_t = (np.transpose(self.theta_hat, (0, 2, 1)) @ context.reshape(-1,1)).ravel().reshape(-1, 1)\n",
    "        p_t += self.alpha * (np.sqrt(context.T @ inv_a @ context.reshape(-1,1)))\n",
    "        return np.where(p_t==max(p_t))[0][0]\n",
    "    \n",
    "    def update_estimates(self, a, r, regret, context, get_correct):\n",
    "        self.bandit_cnt[a] += 1\n",
    "        self.reward_cnt[a] += r\n",
    "        np.append(self.regrets, regret)\n",
    "        self.A[a] += context @ context.reshape(-1, 1)\n",
    "        self.b[a] += r * context.reshape(-1, 1)\n",
    "        \n",
    "        for a_i in range(self.action_cnt):\n",
    "            self.theta_hat[a_i] = normalize(self.theta_hat[a_i], norm = 'l1', axis=0) # ???\n",
    "        \n",
    "        \n",
    "        self.accuracy = self.accuracy + (get_correct - self.accuracy) / (self.pull_cnt + 1)\n",
    "        self.mean_reward = self.mean_reward + (r - self.mean_reward) / (self.pull_cnt + 1)\n",
    "        self.mean_regret = self.mean_regret + (regret - self.mean_regret) / (self.pull_cnt + 1)\n",
    "        self.pull_cnt += 1\n",
    "        \n",
    "    def generate_stats(self, total_reward, total_regret, **kwrags):\n",
    "        print('='*20,'STATS', '='*20)\n",
    "        print(f'Type of the bandit: {self.__type__}'.center(20))\n",
    "        print(f'Total reward: {total_reward}')\n",
    "        print(f'Total regret: {total_regret}')\n",
    "        print(f'Accuracy: {self.accuracy}')\n",
    "        print(f'True success probabilities: {kwrags[\"env_thetas\"]}')\n",
    "        print(f'Bandits pull count: {self.bandit_cnt}')\n",
    "        print(f'Estimates of success probability: {self.theta_hat}')\n",
    "        print(f'Reward from all bandit: {self.reward_cnt}')\n",
    "        print('='*47)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "id": "d13aae23",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinPRUCB(Bandit):\n",
    "    __type__ = 'lin_prucb'\n",
    "    \n",
    "    def __init__(self, n_dims, alpha = 0.1, beta = 0.1, etha = 0.8, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        self.alpha = alpha\n",
    "        self.beta = beta\n",
    "        self.etha = etha\n",
    "        self.n_dims = n_dims\n",
    "        \n",
    "        \n",
    "        self.b = np.zeros((self.action_cnt, self.n_dims, 1))\n",
    "        self.b_pseudo = np.zeros((self.action_cnt, self.n_dims, 1))\n",
    "        \n",
    "        self.v = np.zeros((self.action_cnt, self.n_dims,  self.n_dims))\n",
    "        self.v_pseudo = np.zeros((self.action_cnt, self.n_dims,  self.n_dims))\n",
    "        \n",
    "        self.A_hat = np.zeros((self.action_cnt, self.n_dims, self.n_dims))\n",
    "        \n",
    "        for action in range(self.action_cnt):\n",
    "            self.A_hat[action] = np.eye(self.n_dims)\n",
    "            \n",
    "        self.theta_hat = np.zeros((self.action_cnt, self.n_dims, 1))\n",
    "        \n",
    "    def pull(self, context):\n",
    "        inv_a = np.linalg.inv(self.A_hat)\n",
    "        p_t = (np.transpose(self.theta_hat, (0, 2, 1)) @ context.reshape(-1,1)).ravel().reshape(-1, 1)\n",
    "        p_t += self.alpha * (np.sqrt(context.T @ inv_a @ context.reshape(-1,1)))\n",
    "        return np.where(p_t==max(p_t))[0][0]\n",
    "    \n",
    "    def update_estimates(self, a, r, regret, context, get_correct):\n",
    "        self.bandit_cnt[a] += 1\n",
    "        self.reward_cnt[a] += r\n",
    "        np.append(self.regrets, regret)\n",
    "        \n",
    "        for a_i in range(self.action_cnt):\n",
    "            \n",
    "            if a_i == a:\n",
    "                self.v[a] += context @ context.reshape(-1, 1)\n",
    "                self.b[a] += r * context.reshape(-1, 1)\n",
    "            else:\n",
    "                inv_a = np.linalg.inv(self.A_hat[a_i])\n",
    "                p_t = self.theta_hat[a_i].reshape(1, -1) @ context.reshape(-1,1)\n",
    "                p_t += self.beta * (np.sqrt(context.T @ inv_a @ context.reshape(-1,1)))\n",
    "                pseudo_reward = max(-1, min(0, p_t))\n",
    "                self.v_pseudo[a_i] = self.etha * self.v_pseudo[a_i] + context @ context.reshape(-1, 1)\n",
    "                self.b_pseudo[a_i] = self.etha * self.b_pseudo[a_i] + pseudo_reward * context.reshape(-1, 1)\n",
    "                \n",
    "            self.A_hat[a_i] = np.eye(self.n_dims) + self.v[a_i] + self.v_pseudo[a_i]\n",
    "            self.theta_hat[a_i] = np.linalg.inv(self.A_hat[a_i]) @  (self.b[a_i] + self.b_pseudo[a_i])\n",
    "            \n",
    "        self.mean_reward = self.mean_reward + (r - self.mean_reward) / (self.pull_cnt + 1)\n",
    "        self.mean_regret = self.mean_regret + (regret - self.mean_regret) / (self.pull_cnt + 1)\n",
    "        self.accuracy = self.accuracy + (get_correct - self.accuracy) / (self.pull_cnt + 1)\n",
    "        self.pull_cnt += 1\n",
    "    \n",
    "    def generate_stats(self, total_reward, total_regret, **kwrags):\n",
    "        print('='*20,'STATS', '='*20)\n",
    "        print(f'Type of the bandit: {self.__type__}'.center(20))\n",
    "        print(f'Total reward: {total_reward}')\n",
    "        print(f'Total regret: {total_regret}')\n",
    "        print(f'Accuracy: {self.accuracy}')\n",
    "        print(f'True success probabilities: {kwrags[\"env_thetas\"]}')\n",
    "        print(f'Bandits pull count: {self.bandit_cnt}')\n",
    "        print(f'Estimates of success probability: {self.theta_hat}')\n",
    "        print(f'Reward from all bandit: {self.reward_cnt}')\n",
    "        print('='*47)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "6181a6c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ContextLinEnvironment:\n",
    "\n",
    "    def __init__(self, n_iter, bandits, n_action=5, n_dims = 10, context = None, thetas = None, rewards = None):\n",
    "        self.n_iter = n_iter\n",
    "        self.n_action = n_action\n",
    "        self.bandits = bandits\n",
    "        self.n_dims = n_dims\n",
    "        \n",
    "        self.bandits_params = dict(action_cnt=self.n_action, n_dims=self.n_dims)\n",
    "        \n",
    "        if rewards is None:\n",
    "            # если награды не даны, должны их сгенерировать сами через оценку коэффициентов\n",
    "            if context is None:\n",
    "                self.context = self.generate_random_uniform_vector(n_iter, n_dims)\n",
    "            else:\n",
    "                self.context = context\n",
    "\n",
    "            if thetas is None:\n",
    "                self.thetas = self.generate_random_uniform_vector(n_action, n_dims)\n",
    "            else:\n",
    "                self.thetas = thetas\n",
    "\n",
    "            self.true_rewards = self.generate_true_rewards(self.context, self.thetas)           \n",
    "        else:\n",
    "            self.context = context\n",
    "            self.true_rewards = rewards\n",
    "            self.thetas = thetas\n",
    "\n",
    "        self.best_actions = np.max(self.true_rewards, axis=1)\n",
    "        self.best_actions_idx = np.argmax(self.true_rewards, axis=1)\n",
    "    \n",
    "    def generate_random_uniform_vector(self, n_samples, n_dims):\n",
    "        \"\"\"Generate random vector  of size (n_samples, n_dims).\n",
    "        Each value is generated from uniform distribution and normilized to unit length vector\"\"\"\n",
    "        \n",
    "        random_vectors = np.random.uniform(size=(n_samples, n_dims))\n",
    "        random_vectors_normalized = normalize(random_vectors, norm = 'l2', axis=1)\n",
    "        return random_vectors_normalized\n",
    "    \n",
    "    def generate_true_rewards(self, context, thetas):\n",
    "        \"\"\"Generate rewards for all action in each iteration with some noise. \n",
    "        Final size: (n_samples, n_action)\"\"\"\n",
    "        return context @ thetas.T + np.random.normal(loc=0.0, scale=0.05, size=(self.context.shape[0], self.thetas.shape[0]))\n",
    "        \n",
    "    def get_reward(self, n_sample, ids):\n",
    "        return self.true_rewards[n_sample, ids]\n",
    "    \n",
    "    def get_regret(self, n_sample, ids):\n",
    "        return self.best_actions[n_sample] - self.get_reward(n_sample, ids)\n",
    "    \n",
    "    def get_correct_idx(self, n_sample):\n",
    "        return self.best_actions_idx[n_sample]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "81b3c083",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Experiment:\n",
    "                \n",
    "    @classmethod\n",
    "    def run(cls, env, type_ = 'greedy', generate_stats = True, **kwargs):\n",
    "        ExpResults = namedtuple('ExpResults', ['bandit', \n",
    "                                  'total_reward', \n",
    "                                  'total_regret', \n",
    "                                  'mean_reward', \n",
    "                                  'mean_regret', \n",
    "                                  'cumulative_reward', \n",
    "                                  'ids',\n",
    "                                  'accuracy'])\n",
    "        \n",
    "        bandit_c = [bandit for bandit in env.bandits if bandit.__dict__['__type__'] == type_][0]\n",
    "\n",
    "        bandit = bandit_c(**env.bandits_params, **kwargs)\n",
    "\n",
    "        total_reward = 0\n",
    "        total_regret = 0.\n",
    "        \n",
    "        mean_reward = np.zeros(env.n_iter)\n",
    "        mean_regret = np.zeros(env.n_iter)\n",
    "        accuracy = np.zeros(env.n_iter)\n",
    "        \n",
    "        cumulative_reward = np.zeros(env.n_iter)\n",
    "        \n",
    "        ids = np.zeros(env.n_iter, dtype=int)\n",
    "        get_correct = 0\n",
    "        for i in range(env.n_iter):\n",
    "            a_max_ind = bandit.pull(context = env.context[i])\n",
    "            ids[i] = a_max_ind\n",
    "            r = env.get_reward(i, a_max_ind)\n",
    "            regret = env.get_regret(i, a_max_ind)\n",
    "            if env.get_correct_idx(i) == a_max_ind:      \n",
    "                get_correct = 1\n",
    "            else:\n",
    "                get_correct = 0\n",
    "            total_regret += regret\n",
    "            total_reward += r\n",
    "            bandit.update_estimates(a=a_max_ind, r=r, \n",
    "                                    regret=regret, context=env.context[i], get_correct=get_correct)\n",
    "            \n",
    "            mean_reward[i] = bandit.mean_reward\n",
    "            mean_regret[i] = bandit.mean_regret\n",
    "            accuracy[i] = bandit.accuracy\n",
    "            cumulative_reward[i] = r\n",
    "            \n",
    "        if generate_stats:\n",
    "            bandit.generate_stats(total_reward, total_regret, \n",
    "                                  env_thetas = env.thetas)\n",
    "            \n",
    "        return ExpResults(bandit, total_reward, total_regret, \n",
    "                          mean_reward, mean_regret, cumulative_reward, ids, accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "81a13412",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_spec(spec):\n",
    "    \n",
    "    env_spec = spec['env_param']\n",
    "    n_experiments = spec['n_experiments']\n",
    "    n_action = env_spec['n_action']\n",
    "    n_iter = env_spec['n_iter']\n",
    "    env_model = spec['env']\n",
    "    print(env_spec)\n",
    "    env = env_model(bandits = BANDITS, **env_spec)\n",
    "    alg_cnt = len(spec['alg'])\n",
    "    results = [{\n",
    "                'mean_reward': np.zeros(n_iter), \n",
    "                'mean_regret': np.zeros(n_iter), \n",
    "                'total_cnt': np.zeros(n_action),\n",
    "                'cumulative_reward': np.zeros(n_iter),\n",
    "                'actions_history': np.zeros((n_iter, n_action)),\n",
    "                'rewards': np.zeros((n_experiments, n_iter)),\n",
    "                'regrets': np.zeros((n_experiments, n_iter)),\n",
    "                'accuracy': np.zeros((n_experiments, n_iter)),\n",
    "                } for i in range(alg_cnt)]\n",
    "    \n",
    "    for i in tqdm(range(n_experiments)):\n",
    "        for a in range(alg_cnt):      \n",
    "            exp_res = Experiment.run(env, generate_stats=False, **spec['alg'][a])\n",
    "            results[a]['mean_reward']  = results[a]['mean_reward'] + (exp_res.mean_reward - results[a]['mean_reward']) / (i + 1)\n",
    "            results[a]['mean_regret']  = results[a]['mean_regret'] + (exp_res.mean_regret - results[a]['mean_regret']) / (i + 1)\n",
    "            results[a]['total_cnt']  = results[a]['total_cnt'] + (exp_res.bandit.bandit_cnt - results[a]['total_cnt']) / (i + 1)\n",
    "            results[a]['cumulative_reward']  = results[a]['cumulative_reward'] + (exp_res.cumulative_reward - results[a]['cumulative_reward']) / (i + 1)\n",
    "            results[a]['rewards'][i] = exp_res.mean_reward\n",
    "            results[a]['regrets'][i] = results[a]['mean_regret']\n",
    "            results[a]['accuracy'][i] = exp_res.accuracy\n",
    "            for j, action_id in enumerate(exp_res.ids):\n",
    "                results[a]['actions_history'][j][action_id] += 1\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "id": "e84b3d9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "def grid_search_context(parameters, type_, run_number = 3, \n",
    "                        n_iter = 10000, scoring = 'cumulative_reward',  n_action=5, n_dims = 25, \n",
    "                        generate_stats = True,  context = None, rewards = None, thetas = None, **kwargs):\n",
    "    global BANDITS \n",
    "    results_best_params = {}\n",
    "    results_stats = {}\n",
    "    if context is not None:\n",
    "        parts = len(context) // run_number\n",
    "        # rewards=rewards[i * parts : i * parts + parts]\n",
    "        envs = [ContextLinEnvironment(n_iter=parts,  n_action=n_action, n_dims = n_dims, bandits=BANDITS, context=context[i * parts : i * parts + parts], thetas=thetas) for i in range(run_number)]\n",
    "    else:\n",
    "        envs = [ContextLinEnvironment(n_iter=parts,  n_action=n_action, n_dims = n_dims, bandits=BANDITS, context=context, rewards=rewards) for i in range(run_number)]\n",
    "    params_names = list(parameters.keys())\n",
    "    result_grid = {}\n",
    "    for params in tqdm(product(*parameters.values())):\n",
    "        mean_val = []\n",
    "        for run in range(run_number):\n",
    "            env = envs[run]\n",
    "            exp_linucb = Experiment.run(env, type_ = type_, generate_stats = generate_stats, \n",
    "                                        **dict(zip(params_names, params)), **kwargs)\n",
    "            accuracy = exp_linucb.accuracy\n",
    "            mean_val.append(accuracy)\n",
    "        result_grid[tuple(zip(params_names, params))] = np.mean(mean_val)\n",
    "\n",
    "    best_param = tuple(max(result_grid.items(), key=operator.itemgetter(1))[0])\\\n",
    "    \n",
    "    return best_param, result_grid"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5367cc50",
   "metadata": {},
   "source": [
    "# Скачиваем сырые данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "0d6aacd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_data = []\n",
    "with open(\"data_v8.pckl\",\"rb\") as fileOpener:\n",
    "    while True:\n",
    "        try:\n",
    "            raw_data.append(pickle.load(fileOpener))\n",
    "        except EOFError:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dfc3f69",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "cde8de83",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(raw_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1620fb8",
   "metadata": {},
   "source": [
    "# Анализ сырых данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "4f93092c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>has_vehicle</th>\n",
       "      <th>income</th>\n",
       "      <th>has_spouse</th>\n",
       "      <th>...</th>\n",
       "      <th>снег</th>\n",
       "      <th>туман</th>\n",
       "      <th>мгла</th>\n",
       "      <th>гроза</th>\n",
       "      <th>метель</th>\n",
       "      <th>гололёд</th>\n",
       "      <th>изморозь</th>\n",
       "      <th>ветер</th>\n",
       "      <th>облачный день</th>\n",
       "      <th>температура</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.636391</td>\n",
       "      <td>0.826773</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>25-33</td>\n",
       "      <td>0</td>\n",
       "      <td>powerty</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.42</td>\n",
       "      <td>1</td>\n",
       "      <td>-2.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>0.809985</td>\n",
       "      <td>0.573292</td>\n",
       "      <td>0.551466</td>\n",
       "      <td>0.548077</td>\n",
       "      <td>0.529173</td>\n",
       "      <td>0</td>\n",
       "      <td>60-80</td>\n",
       "      <td>1</td>\n",
       "      <td>low-middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>-5.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>485</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.534076</td>\n",
       "      <td>0.653262</td>\n",
       "      <td>0.915266</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>25-33</td>\n",
       "      <td>1</td>\n",
       "      <td>middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>17.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.537104</td>\n",
       "      <td>0.587071</td>\n",
       "      <td>0.024717</td>\n",
       "      <td>0.737169</td>\n",
       "      <td>0</td>\n",
       "      <td>25-33</td>\n",
       "      <td>1</td>\n",
       "      <td>high-middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.22</td>\n",
       "      <td>1</td>\n",
       "      <td>-4.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>0.526112</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.438353</td>\n",
       "      <td>0.006495</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>33-45</td>\n",
       "      <td>0</td>\n",
       "      <td>low-middle</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.50</td>\n",
       "      <td>1</td>\n",
       "      <td>-8.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27686</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.549766</td>\n",
       "      <td>0.709378</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>33-45</td>\n",
       "      <td>0</td>\n",
       "      <td>low-middle</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>4.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27746</th>\n",
       "      <td>0.814919</td>\n",
       "      <td>0.583819</td>\n",
       "      <td>0.486025</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.470053</td>\n",
       "      <td>1</td>\n",
       "      <td>45-60</td>\n",
       "      <td>1</td>\n",
       "      <td>high-middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.86</td>\n",
       "      <td>1</td>\n",
       "      <td>-9.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27780</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.757998</td>\n",
       "      <td>0.792827</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>33-45</td>\n",
       "      <td>0</td>\n",
       "      <td>middle</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.27</td>\n",
       "      <td>1</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27936</th>\n",
       "      <td>0.416304</td>\n",
       "      <td>0.441700</td>\n",
       "      <td>0.555628</td>\n",
       "      <td>0.561017</td>\n",
       "      <td>0.470856</td>\n",
       "      <td>0</td>\n",
       "      <td>16-25</td>\n",
       "      <td>1</td>\n",
       "      <td>low-middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>10.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28165</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.613967</td>\n",
       "      <td>0.581010</td>\n",
       "      <td>0.123850</td>\n",
       "      <td>0.655175</td>\n",
       "      <td>1</td>\n",
       "      <td>33-45</td>\n",
       "      <td>1</td>\n",
       "      <td>high-middle</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>6.80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>240 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           taxi       car      bike  pedestrian        ot  sex    age  \\\n",
       "133    0.000000  0.000000  0.636391    0.826773  1.000000    1  25-33   \n",
       "316    0.809985  0.573292  0.551466    0.548077  0.529173    0  60-80   \n",
       "485    0.000000  0.534076  0.653262    0.915266  1.000000    1  25-33   \n",
       "681    1.000000  0.537104  0.587071    0.024717  0.737169    0  25-33   \n",
       "862    0.526112  0.000000  0.438353    0.006495  1.000000    1  33-45   \n",
       "...         ...       ...       ...         ...       ...  ...    ...   \n",
       "27686  0.000000  0.000000  0.549766    0.709378  1.000000    0  33-45   \n",
       "27746  0.814919  0.583819  0.486025    0.000000  0.470053    1  45-60   \n",
       "27780  0.000000  0.000000  0.757998    0.792827  1.000000    1  33-45   \n",
       "27936  0.416304  0.441700  0.555628    0.561017  0.470856    0  16-25   \n",
       "28165  1.000000  0.613967  0.581010    0.123850  0.655175    1  33-45   \n",
       "\n",
       "       has_vehicle       income  has_spouse  ...  снег  туман  мгла  гроза  \\\n",
       "133              0      powerty           0  ...     0      0     0      0   \n",
       "316              1   low-middle           1  ...     0      0     0      0   \n",
       "485              1       middle           1  ...     0      0     0      0   \n",
       "681              1  high-middle           1  ...     0      1     0      0   \n",
       "862              0   low-middle           0  ...     1      0     0      0   \n",
       "...            ...          ...         ...  ...   ...    ...   ...    ...   \n",
       "27686            0   low-middle           0  ...     1      0     0      0   \n",
       "27746            1  high-middle           1  ...     0      0     0      0   \n",
       "27780            0       middle           0  ...     1      0     0      0   \n",
       "27936            1   low-middle           1  ...     1      0     0      0   \n",
       "28165            1  high-middle           1  ...     1      0     0      0   \n",
       "\n",
       "       метель  гололёд  изморозь  ветер  облачный день  температура  \n",
       "133         0        0         0   4.42              1        -2.44  \n",
       "316         1        0         0   0.00              1        -5.53  \n",
       "485         0        0         0   0.00              1        17.26  \n",
       "681         0        0         0   2.22              1        -4.54  \n",
       "862         0        0         0   9.50              1        -8.68  \n",
       "...       ...      ...       ...    ...            ...          ...  \n",
       "27686       0        0         0   0.00              1         4.45  \n",
       "27746       0        0         0   8.86              1        -9.68  \n",
       "27780       0        0         0   8.27              1         0.10  \n",
       "27936       0        0         0   0.00              1        10.90  \n",
       "28165       0        0         0   0.00              1         6.80  \n",
       "\n",
       "[240 rows x 22 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['балл_пробок'] >= 8].head(240)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfb0a79c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9cfccfc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    15100\n",
       "1    14900\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sex.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "32d14f66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "middle         0.335733\n",
       "low-middle     0.264633\n",
       "high-middle    0.237000\n",
       "powerty        0.115900\n",
       "rich           0.046733\n",
       "Name: income, dtype: float64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.income.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "66b69308",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33-45    0.294533\n",
       "45-60    0.202133\n",
       "16-25    0.201133\n",
       "25-33    0.200533\n",
       "60-80    0.101667\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.age.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "733b5307",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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MTHHTucBAJPLMexFRUUKh8PR43A4LI/Hc9XzZ86ciTkPAJhcjmEvKytTb2+v+vv7NTQ0pO7ubpWXl0fP33bbbZo6dar2798vSdq1a1fMeQDA5HIZY4zTRV1dXXrnnXc0MjKi+vp6+f1++f1+NTU1qbi4WEePHlVzc7MGBgZ09913a+PGjZoyZcpk7AcAfEtcYQcAZA/+8hQALEPYAcAyhB0ALEPYAcAyN1TYnT7M7JK9e/dq7ty5475/+PBh3XPPPamcGCPZvaFQSEuXLtVjjz2mhoYGnTx5MmO3njx5UosWLVJtba2eeuopnTp1KuVbJee9mzdvVkVFhWpra1VbWxu95vPPP9eiRYs0b948rVixQoODgxm9d//+/aqvr1dtba0WL16c8Y/vJZP5XEt2azqeZ3EzN4jTp0+biooKc/bsWTM4OGh8Pp/55z//Oe66cDhs5s2bZyoqKmK+f/78edPQ0GDuuOOOjN+7ePFi09HRYYwxpqOjw6xatSpjt77wwgumvb3dGGPM1q1bzfPPP5/SrfHuXbZsmfnHP/4x7rZLly41f/7zn40xxmzevNm8+eabGb23oqLCHDlyxBhjzB//+EezfPnyjN5rzOQ+165n62Q/zxJxw7xiv/zDzPLy8qIfZvZtzc3N0Q84u9ymTZu0ePHiyZgqKfm9/f39Onr0qBoaGiRJdXV1eu655zJyq3TxIykGBgYkSUNDQ7r55ptTujXevZ988oneeecd+Xw+vf766/rmm280MjKijz76SF6vV9LFD7y70n9npuy9cOGCVq1apdmzZ0uSZs2apS+++CJj914ymc+1ZLem43mWiBsm7Ff6MLNvf1jZ1q1bddddd2nOnDkx3//ggw80PDysefPmTcpWKfm9n332mW699VZt2rRJdXV1ampq0k033ZSRWyVp1apV2rJli+6//3797ne/k9/vT+nWePYODg7qzjvv1Jo1a/T+++/r66+/1ltvvaWzZ89q+vTpys29+Nl5yXzg3WTunTJlimprayVd/B/o5s2b9dBDD2XsXmnyn2vJbk3H8ywRN0zYnT6s7NixY+ru7tazzz4bc7twOKy3335bP/3pTydtq5T83tHRUR0+fFilpaX605/+pAcffFBr167NyK2S9OKLL+r111/Xhx9+qNdee00rV66USfHfzDntnTZtmtra2vT9739fubm5evrpp/W3v/3tih9wNxkfeJfs3ksuXLigF154QaOjo1q2bFnG7k3Hcy3Zrel4niXihgm704eZBQIBhcNh1dXVaenSpQqFQlq4cKH27t2rL7/8MvoDPkmqra2Nvn2QaXvdbremTZumiooKSVJ1dXXMxyxn0tb+/n6dOHEi+irS6/UqHA7r7Nmzad37+eefa8eOHdFjY4xyc3P1ne98R+fOndPY2NgVb5dpe6WLrziXLFmi0dFRvf3225PyqjLZvel4riW7NR3Ps4Sk5Z39NLj0Q5K+vj5z/vx5U1NTYw4cOHDFaz/77LNxPzy9ZLJ/eJrM3qqqKrN3715jjDF/+ctfzBNPPJGRWyORiLn//vvNRx99ZIwxZt++fWbu3Lkp3RrP3r6+PvPDH/7QfPrppyYSiZiXXnrJ/Pa3vzXGGOP3+01nZ6cxxpi33nrLvPrqqxm9d8WKFaa5udmMjY2lfOdE7L3cZP7wNJmtk/08S8QNE3ZjjOns7DSPPvqoqaysNK2trcYYY5YsWWIOHjwYc10mhN2Y5Pf+61//Mk8++aR59NFHzYIFC8y///3vjN164MABU19fb6qrq82CBQvMoUOHUr41nr2BQCB6fu3ateabb74xxhhz8uRJ8+STT5pHHnnEPP300+bLL7/M2L2HDh0yd9xxh6mqqjI1NTWmpqbGLFmyJGP3fttkPdeS3ZqO51m8+BAwALDMDfMeOwDcKAg7AFiGsAOAZQg7AFiGsAOAZQg7AFiGsAOAZQg7AFjmfwH+LbFsjzM0ZwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.has_vehicle.value_counts(normalize = True).hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "e2918e69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.5696\n",
       "0    0.4304\n",
       "Name: has_spouse, dtype: float64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.has_spouse.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "54d39bd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 1    0.923533\n",
       "-1    0.038400\n",
       " 0    0.038067\n",
       "Name: облачный день, dtype: float64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['облачный день'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "4364bd4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "      <th>sex</th>\n",
       "      <th>has_vehicle</th>\n",
       "      <th>has_spouse</th>\n",
       "      <th>балл_пробок</th>\n",
       "      <th>дождь</th>\n",
       "      <th>снег</th>\n",
       "      <th>туман</th>\n",
       "      <th>мгла</th>\n",
       "      <th>гроза</th>\n",
       "      <th>метель</th>\n",
       "      <th>гололёд</th>\n",
       "      <th>изморозь</th>\n",
       "      <th>ветер</th>\n",
       "      <th>облачный день</th>\n",
       "      <th>температура</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.616440</td>\n",
       "      <td>0.681432</td>\n",
       "      <td>0.143642</td>\n",
       "      <td>0.216275</td>\n",
       "      <td>0.706735</td>\n",
       "      <td>0.498733</td>\n",
       "      <td>0.572100</td>\n",
       "      <td>0.572100</td>\n",
       "      <td>5.227267</td>\n",
       "      <td>0.431700</td>\n",
       "      <td>0.318133</td>\n",
       "      <td>0.023433</td>\n",
       "      <td>0.008467</td>\n",
       "      <td>0.065867</td>\n",
       "      <td>0.042033</td>\n",
       "      <td>0.015000</td>\n",
       "      <td>0.016633</td>\n",
       "      <td>4.550601</td>\n",
       "      <td>0.887700</td>\n",
       "      <td>5.860112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.270016</td>\n",
       "      <td>0.325557</td>\n",
       "      <td>0.221165</td>\n",
       "      <td>0.240470</td>\n",
       "      <td>0.260247</td>\n",
       "      <td>0.500007</td>\n",
       "      <td>0.494783</td>\n",
       "      <td>0.494783</td>\n",
       "      <td>1.312253</td>\n",
       "      <td>0.495321</td>\n",
       "      <td>0.465759</td>\n",
       "      <td>0.151278</td>\n",
       "      <td>0.091626</td>\n",
       "      <td>0.248053</td>\n",
       "      <td>0.200669</td>\n",
       "      <td>0.121554</td>\n",
       "      <td>0.127895</td>\n",
       "      <td>5.076349</td>\n",
       "      <td>0.417805</td>\n",
       "      <td>12.574534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-19.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.453231</td>\n",
       "      <td>0.479501</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.546948</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-3.202500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.650769</td>\n",
       "      <td>0.679677</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.139207</td>\n",
       "      <td>0.708832</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.020000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.834411</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.209814</td>\n",
       "      <td>0.345668</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.860000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>34.300000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               taxi           car          bike    pedestrian            ot  \\\n",
       "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
       "mean       0.616440      0.681432      0.143642      0.216275      0.706735   \n",
       "std        0.270016      0.325557      0.221165      0.240470      0.260247   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.453231      0.479501      0.000000      0.000000      0.546948   \n",
       "50%        0.650769      0.679677      0.000000      0.139207      0.708832   \n",
       "75%        0.834411      1.000000      0.209814      0.345668      1.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "                sex   has_vehicle    has_spouse   балл_пробок         дождь  \\\n",
       "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
       "mean       0.498733      0.572100      0.572100      5.227267      0.431700   \n",
       "std        0.500007      0.494783      0.494783      1.312253      0.495321   \n",
       "min        0.000000      0.000000      0.000000      2.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      4.000000      0.000000   \n",
       "50%        0.000000      1.000000      1.000000      5.000000      0.000000   \n",
       "75%        1.000000      1.000000      1.000000      6.000000      1.000000   \n",
       "max        1.000000      1.000000      1.000000      8.000000      1.000000   \n",
       "\n",
       "               снег         туман          мгла         гроза        метель  \\\n",
       "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
       "mean       0.318133      0.023433      0.008467      0.065867      0.042033   \n",
       "std        0.465759      0.151278      0.091626      0.248053      0.200669   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        1.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "            гололёд      изморозь         ветер  облачный день   температура  \n",
       "count  30000.000000  30000.000000  30000.000000   30000.000000  30000.000000  \n",
       "mean       0.015000      0.016633      4.550601       0.887700      5.860112  \n",
       "std        0.121554      0.127895      5.076349       0.417805     12.574534  \n",
       "min        0.000000      0.000000      0.000000      -1.000000    -19.800000  \n",
       "25%        0.000000      0.000000      0.000000       1.000000     -3.202500  \n",
       "50%        0.000000      0.000000      3.020000       1.000000      5.900000  \n",
       "75%        0.000000      0.000000      7.750000       1.000000     14.860000  \n",
       "max        1.000000      1.000000     34.000000       1.000000     34.300000  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e339e5e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>has_vehicle</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.508849</td>\n",
       "      <td>0.385021</td>\n",
       "      <td>0.145802</td>\n",
       "      <td>0.290206</td>\n",
       "      <td>0.898471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.670061</td>\n",
       "      <td>0.903676</td>\n",
       "      <td>0.139046</td>\n",
       "      <td>0.165140</td>\n",
       "      <td>0.563873</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 taxi       car      bike  pedestrian        ot\n",
       "has_vehicle                                                    \n",
       "0            0.508849  0.385021  0.145802    0.290206  0.898471\n",
       "1            0.670061  0.903676  0.139046    0.165140  0.563873"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('has_vehicle')[targets].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4eabb607",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "27a724ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "targets = ['taxi', 'car', 'bike', 'pedestrian', 'ot']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "9e535e13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>балл_пробок</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.66</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.64</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.65</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.64</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.64</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.51</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.54</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             taxi   car  bike  pedestrian    ot\n",
       "балл_пробок                                    \n",
       "2            0.66  0.73  0.06        0.17  0.71\n",
       "3            0.64  0.74  0.07        0.18  0.69\n",
       "4            0.65  0.74  0.07        0.18  0.69\n",
       "5            0.64  0.74  0.07        0.18  0.69\n",
       "6            0.64  0.74  0.07        0.19  0.69\n",
       "7            0.51  0.45  0.44        0.35  0.76\n",
       "8            0.54  0.47  0.42        0.32  0.77"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('балл_пробок')[targets].mean().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "01966226",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.64</td>\n",
       "      <td>0.69</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.60</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     taxi   car  bike  pedestrian    ot\n",
       "sex                                    \n",
       "0    0.64  0.69  0.13        0.21  0.71\n",
       "1    0.60  0.68  0.16        0.22  0.70"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('sex')[targets].mean().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1eb95477",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>taxi</th>\n",
       "      <th>car</th>\n",
       "      <th>bike</th>\n",
       "      <th>pedestrian</th>\n",
       "      <th>ot</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>income</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>high-middle</th>\n",
       "      <td>0.80</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>low-middle</th>\n",
       "      <td>0.55</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>middle</th>\n",
       "      <td>0.69</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>powerty</th>\n",
       "      <td>0.56</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.26</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rich</th>\n",
       "      <td>0.86</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             taxi   car  bike  pedestrian    ot\n",
       "income                                         \n",
       "high-middle  0.80  1.00  0.00        0.06  0.61\n",
       "low-middle   0.55  0.56  0.06        0.28  0.87\n",
       "middle       0.69  0.96  0.00        0.09  0.67\n",
       "powerty      0.56  0.45  0.00        0.26  1.00\n",
       "rich         0.86  1.00  0.00        0.00  0.56"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('income')[targets].median().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "1375c09f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x1440 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,20))\n",
    "ax = pd.melt(df, value_vars=targets).boxplot(by='variable', fontsize =25, figsize=(15,10) ,grid=False)\n",
    "x_axis = ax.axes.get_xaxis()\n",
    "x_label = x_axis.get_label()\n",
    "plt.title('Распределение наград по типам маршрутов', fontsize=25);\n",
    "##print isinstance(x_label, matplotlib.artist.Artist)\n",
    "x_label.set_visible(False);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "544f7480",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.groupby(pd.cut(df['ветер'], 7))[targets].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acf7663c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.groupby(pd.cut(df['температура'], 7))[targets].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcd727a0",
   "metadata": {},
   "source": [
    "# Обработка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "c1e37030",
   "metadata": {},
   "outputs": [],
   "source": [
    "targets = ['taxi', 'car', 'bike', 'pedestrian', 'ot']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "c123e3f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "targets_df = df[targets]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "4d45c8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(targets, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "88e96040",
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_data = df.select_dtypes([np.float64])\n",
    "numeric_features = numeric_data.columns\n",
    "cat_data = df.select_dtypes([np.object, np.int64])\n",
    "cat_features = cat_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "501d22c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ветер', 'температура'], dtype='object')"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "3dbace94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
       "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
       "       'изморозь', 'облачный день'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "8990e1ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_grid(model, params, X, y, random_grid=False, cv=5, scoring='neg_mean_squared_error', n_iter=100):\n",
    "    if random_grid:\n",
    "        grid = RandomizedSearchCV(model, params, n_iter=n_iter, n_jobs=-1, scoring=scoring, cv=cv)\n",
    "    else:\n",
    "        grid = GridSearchCV(model, params, cv=cv, scoring=scoring, n_jobs=-1)\n",
    "    grid.fit(X, y)\n",
    "    print('Model {}, score: {}, best_params: {}'.format(grid.estimator, grid.best_score_, grid.best_params_))\n",
    "    return grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "8d2d8ab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a17d7b17",
   "metadata": {},
   "outputs": [],
   "source": [
    "poly_features = ['sex', 'has_spouse', 'has_vehicle']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "678906e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
       "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
       "       'изморозь', 'облачный день'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "id": "90210953",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_weight_for_route_type(df, route_type, test_size=0.3, sample= 0.8, degree = 2, interaction_only = False, include_poly_features = True, random_state=42):\n",
    "\n",
    "    random_index = np.random.randint(df.index.start, df.index.stop, size=int(sample*len(df)))\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(df.loc[random_index], targets_df.loc[random_index, route_type].values, \n",
    "                                                        test_size=test_size, random_state=random_state)\n",
    "\n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('cat', OneHotEncoder(), cat_features),\n",
    "            ('num', StandardScaler(), numeric_features)], n_jobs=-1)\n",
    "    \n",
    "    if include_poly_features:\n",
    "        ridge_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                          ('poly', PolynomialFeatures(interaction_only = interaction_only, degree=degree, include_bias = True)),\n",
    "                                          ('regressor', Ridge())])\n",
    "        lasso_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                         ('poly', PolynomialFeatures(interaction_only = interaction_only, degree=degree, include_bias = True)),\n",
    "                                         ('regressor', Lasso())])\n",
    "        sgd_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                       ('poly', PolynomialFeatures(interaction_only = interaction_only, degree=degree, include_bias = True)),\n",
    "                                       ('regressor', SGDRegressor())])\n",
    "    else:\n",
    "        ridge_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                          ('regressor', Ridge())])\n",
    "        lasso_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                         ('regressor', Lasso())])\n",
    "        sgd_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                       ('regressor', SGDRegressor())])\n",
    "    \n",
    "    ridge_params = {'regressor__alpha': 10.0 ** -np.arange(1, 6)}\n",
    "    lasso_params = {'regressor__alpha': 10.0 ** -np.arange(4, 6)}\n",
    "    sgd_params = {'regressor__penalty': ['l2', 'l1', 'elasticnet'], 'regressor__learning_rate': [ 'optimal', 'adaptive'], 'regressor__loss':  ['squared_loss', 'huber'], 'regressor__alpha': 10.0 ** -np.arange(4, 6)}\n",
    "\n",
    "    models = [ridge_pipeline, lasso_pipeline, sgd_pipeline]\n",
    "    params = [ridge_params, lasso_params, sgd_params]\n",
    "    \n",
    "    predictors = []\n",
    "    for model, param in zip(models, params):\n",
    "        predictors.append(train_grid(model, param, X_train, y_train))\n",
    "    return predictors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "id": "e44f3565",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_weight_for_route_type_poly(df, route_type, test_size=0.3, sample= 0.8, degree = 2, random_state=42):\n",
    "\n",
    "    random_index = np.random.randint(df.index.start, df.index.stop, size=int(sample*len(df)))\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(df.loc[random_index], targets_df.loc[random_index, route_type].values, \n",
    "                                                        test_size=test_size, random_state=random_state)\n",
    "\n",
    "                    \n",
    "    cat_transformers = Pipeline(steps=[\n",
    "        ('onehot', OneHotEncoder()),\n",
    "        ('poly',  PolynomialFeatures(interaction_only = True, degree=degree, include_bias = True))])\n",
    "\n",
    "    num_transformers = Pipeline(steps=[\n",
    "        ('num', StandardScaler())])\n",
    "    \n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('num_tr', num_transformers, numeric_features),\n",
    "            ('cat_tr', cat_transformers, cat_features)], n_jobs=-1)\n",
    "\n",
    "        \n",
    "    ridge_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                      ('regressor', Ridge())])\n",
    "    lasso_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                     ('regressor', Lasso())])\n",
    "    sgd_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                   ('regressor', SGDRegressor())])\n",
    "\n",
    "    \n",
    "    ridge_params = {'regressor__alpha': 10.0 ** -np.arange(1, 6)}\n",
    "    lasso_params = {'regressor__alpha': 10.0 ** -np.arange(4, 6)}\n",
    "    sgd_params = {'regressor__penalty': ['l2', 'l1', 'elasticnet'], 'regressor__learning_rate': [ 'optimal', 'adaptive'], 'regressor__loss':  ['squared_loss', 'huber'], 'regressor__alpha': 10.0 ** -np.arange(4, 6)}\n",
    "\n",
    "    models = [ridge_pipeline, lasso_pipeline, sgd_pipeline]\n",
    "    params = [ridge_params, lasso_params, sgd_params]\n",
    "    \n",
    "    predictors = []\n",
    "    for model, param in zip(models, params):\n",
    "        predictors.append(train_grid(model, param, X_train, y_train))\n",
    "    return predictors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e43bb3d7",
   "metadata": {},
   "source": [
    "# Оценка весов признаков линейными алгоритмами"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab324bb6",
   "metadata": {},
   "source": [
    "### С полиномиальными признаками"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45db112d",
   "metadata": {},
   "source": [
    "#### Только взаимодействия для категориальных признаковё"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "id": "1d68bc7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.018285018788772513, best_params: {'regressor__alpha': 0.001}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:513: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.21464794724118974, tolerance: 0.11410462101640388\n",
      "  model = cd_fast.sparse_enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.018112982021300284, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.018129467717932723, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "car_regr_poly_cat = calc_weight_for_route_type_poly(df, sample=.5, route_type = 'car')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "id": "a84da878",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.021172705296735705, best_params: {'regressor__alpha': 0.001}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:513: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.35240245278527027, tolerance: 0.0711360311942329\n",
      "  model = cd_fast.sparse_enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.020912677307612874, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.020883514606539987, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "ot_regr_poly_cat = calc_weight_for_route_type_poly(df, sample=.5, route_type = 'ot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "id": "f896d6fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.030596570525452414, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.030141167934802503, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.03015371164852203, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "pedestrian_regr_poly_cat = calc_weight_for_route_type_poly(df, sample=.5, route_type = 'pedestrian')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "id": "7e073d61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.016020366524098887, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.01573049858757091, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.015766092453252105, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "bike_regr_poly_cat = calc_weight_for_route_type_poly(df, sample=.5, route_type = 'bike')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 534,
   "id": "42d54b7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.04072694155252897, best_params: {'regressor__alpha': 0.01}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:513: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.525832486836748, tolerance: 0.07893253441532644\n",
      "  model = cd_fast.sparse_enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.039969970754284954, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('num_tr',\n",
      "                                                  Pipeline(steps=[('num',\n",
      "                                                                   StandardScaler())]),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object')),\n",
      "                                                 ('cat_tr',\n",
      "                                                  Pipeline(steps=[('onehot',\n",
      "                                                                   OneHotEncoder()),\n",
      "                                                                  ('poly',\n",
      "                                                                   PolynomialFeatures(interaction_only=True))]),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.039985522108942094, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "taxi_regr_poly_cat = calc_weight_for_route_type_poly(df, sample=.5, route_type = 'taxi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "id": "f2c1c7f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimated_weights_cat_poly = np.vstack((taxi_regr_poly_cat[0]['regressor'].coef_,\n",
    "                               car_regr_poly_cat[0]['regressor'].coef_,\n",
    "                               bike_regr_poly_cat[0]['regressor'].coef_, \n",
    "                               pedestrian_regr_poly_cat[0]['regressor'].coef_,\n",
    "                               ot_regr_poly_cat[0]['regressor'].coef_,\n",
    "                              ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "id": "c3ebf673",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.03544996, -0.00922286,  0.12550387,  0.0191981 ,  0.00708161,\n",
       "        0.        ,  0.        ,  0.00844604,  0.        ,  0.        ,\n",
       "        0.06580329,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.06580329,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.02002452,  0.00625519,  0.        ,  0.03202254,\n",
       "        0.01292272,  0.01335699,  0.01659516,  0.00968456,  0.01283234,\n",
       "        0.01344737,  0.02217205,  0.00410766,  0.02114583,  0.00513388,\n",
       "        0.01932835,  0.00695136,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.01351779,  0.00871052,  0.00161   ,  0.        ,\n",
       "       -0.00638065,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.0046266 ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.00260591,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.00840386,  0.        ,  0.        ,  0.00500074,  0.        ,\n",
       "        0.        ,  0.        ,  0.00270107,  0.        ,  0.        ,\n",
       "        0.00038089,  0.        ,  0.        ,  0.        ,  0.00560778,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00363325,\n",
       "        0.        ,  0.00882   ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.01193604,  0.        ,  0.00882   ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.0078515 ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00232862,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "       -0.0016424 ,  0.0758456 ,  0.03619067,  0.        ,  0.        ,\n",
       "        0.01128993, -0.12580629, -0.0016424 ,  0.0758456 ,  0.00029264,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.02414364,\n",
       "        0.        ,  0.        ,  0.01400804,  0.        ,  0.00659611,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.01068199,  0.00245676,  0.        ,  0.00804015,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00739955,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.06282486,\n",
       "       -0.06630048,  0.        ,  0.12797688,  0.        ,  0.04073122,\n",
       "        0.        ,  0.06282486,  0.        , -0.00380141,  0.        ,\n",
       "        0.01235185,  0.        ,  0.01758543,  0.        ,  0.        ,\n",
       "        0.00859724,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.0143032 ,  0.        ,  0.0015557 ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.02388262,  0.        ,  0.        ,\n",
       "        0.02256773,  0.        ,  0.        ,  0.01590662,  0.        ,\n",
       "        0.        ,  0.        ,  0.02256773,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00108109,  0.        ,  0.01283896,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.01740297,\n",
       "        0.01290092,  0.        ,  0.01591907,  0.        ,  0.        ,\n",
       "        0.        ,  0.01992515, -0.01455146,  0.00467625,  0.        ,\n",
       "       -0.01547859, -0.01043785,  0.        ,  0.01992515, -0.01455146,\n",
       "        0.        ,  0.01396543, -0.00230725,  0.        ,  0.00972609,\n",
       "       -0.00035999,  0.        ,  0.01006936, -0.00469566,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.00809014, -0.00271645,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        , -0.00867261,\n",
       "        0.        ,  0.0232255 , -0.05029673,  0.        , -0.01133894,\n",
       "       -0.00904114,  0.        ,  0.        ,  0.0232255 , -0.05029673,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.01249889,\n",
       "       -0.00398411,  0.        ,  0.        , -0.01273552,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "       -0.00871979,  0.        ,  0.0124891 ,  0.        ,  0.        ,\n",
       "        0.00952163,  0.        ,  0.06580329,  0.        ,  0.        ,\n",
       "        0.00062682,  0.        ,  0.00266236,  0.        ,  0.        ,\n",
       "        0.        ,  0.03333972,  0.        ,  0.01036406,  0.        ,\n",
       "        0.        ,  0.        ,  0.02600264,  0.        ,  0.00886356,\n",
       "        0.        ,  0.02259972,  0.        ,  0.00515509,  0.        ,\n",
       "        0.00756284,  0.        ,  0.        ,  0.01199884,  0.        ,\n",
       "        0.        ,  0.        ,  0.01129161,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00571811, -0.00720382,  0.        ,\n",
       "        0.        ,  0.        ,  0.01419154,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.01001302,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.0124891 ,  0.        ,  0.        ,\n",
       "        0.02842357, -0.01472561, -0.00556571, -0.00922951,  0.        ,\n",
       "        0.        ,  0.        ,  0.00578064,  0.00713768,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00978316,\n",
       "        0.        ,  0.        ,  0.00913024,  0.        ,  0.        ,\n",
       "        0.        ,  0.00975868,  0.        ,  0.02754184,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        , -0.00125119,  0.01469149,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.0028665 ,  0.02242704,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        , -0.00508946,  0.        ,\n",
       "        0.0133118 ,  0.        ,  0.        ,  0.        ,  0.01129161,\n",
       "        0.        ,  0.        , -0.00725118,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00759168,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.00891134,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.00684077,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00952163,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00264121,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00038674,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00417993,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.02497085,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.01473517,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.01413611,  0.        ,  0.        ,\n",
       "        0.00062682,  0.        ,  0.00266236,  0.        ,  0.        ,\n",
       "        0.        ,  0.03333972,  0.        ,  0.01036406,  0.        ,\n",
       "        0.        ,  0.        ,  0.02600264,  0.        ,  0.00886356,\n",
       "        0.        ,  0.02259972,  0.        ,  0.00515509,  0.        ,\n",
       "        0.00756284,  0.        ,  0.        ,  0.01199884,  0.        ,\n",
       "        0.00571811, -0.00720382,  0.        ,  0.        ,  0.        ,\n",
       "        0.01419154,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.01001302,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.06916005, -0.009016  ,  0.0098477 ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        , -0.00712222,  0.00054523,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00329159,\n",
       "       -0.00986859,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.00777904,  0.        ,  0.00253588,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.00469671,  0.        ,  0.        ,  0.        ,  0.01596701,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        , -0.00788054,  0.        ,\n",
       "        0.        ,  0.        , -0.00427031,  0.00671282,  0.        ,\n",
       "        0.00209609,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        , -0.00328688,  0.00572939,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.08067338, -0.02515231,  0.04161505,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.03539828,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.0234444 ,  0.        ,\n",
       "       -0.05655976,  0.03399564,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.03899474,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.03498509,  0.        ,  0.02409038,\n",
       "        0.        ,  0.0066318 ,  0.        ,  0.01048212,  0.        ,\n",
       "        0.03437158,  0.        ,  0.02977582,  0.        ,  0.0227663 ,\n",
       "        0.02600789,  0.        ,  0.        ,  0.00921774,  0.        ,\n",
       "        0.01698858,  0.        ,  0.00320241,  0.        ,  0.00328994,\n",
       "        0.        ,  0.0365191 ,  0.        ,  0.03089713,  0.        ,\n",
       "        0.02207012,  0.        ,  0.        ,  0.        ,  0.08484677,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.01224007,  0.        ,  0.00581612,\n",
       "        0.        ,  0.00867705,  0.        ,  0.00575278,  0.        ,\n",
       "        0.        ,  0.        ,  0.01024962,  0.        ,  0.        ,\n",
       "        0.00050176,  0.        ,  0.        ,  0.02209057,  0.        ,\n",
       "        0.01669283,  0.        ,  0.02137125,  0.        ,  0.04127824,\n",
       "        0.        ,  0.        ,  0.        ,  0.01301925,  0.        ,\n",
       "        0.        ,  0.        ,  0.01357842,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.01458164,\n",
       "        0.01669168,  0.        ,  0.        ,  0.        ,  0.02282775,\n",
       "        0.        ,  0.        ,  0.        ,  0.00427103,  0.        ,\n",
       "        0.        ,  0.00241961,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.00513388,\n",
       "        0.        ,  0.0106416 ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.00057138,  0.        ,  0.00968456,\n",
       "        0.        ,  0.0133748 ,  0.        ,  0.        ,  0.        ,\n",
       "        0.01567319,  0.        ,  0.        ,  0.00410766,  0.        ,\n",
       "        0.00513388,  0.        ,  0.00695136,  0.        ,  0.        ,\n",
       "        0.02129351,  0.01344737,  0.        ,  0.01344737,  0.        ,\n",
       "        0.01344737,  0.        ,  0.        ,  0.00953301,  0.        ,\n",
       "        0.        ,  0.        ,  0.00013047,  0.        ,  0.01792691,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.0150832 ,  0.        ,  0.        ,  0.        ,  0.04233357,\n",
       "        0.        ,  0.        ,  0.01516561,  0.        ,  0.        ,\n",
       "        0.        ,  0.01334813,  0.        ,  0.        ,  0.        ,\n",
       "        0.01611446,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ])"
      ]
     },
     "execution_count": 545,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot_regr_poly_cat[2]['regressor'].coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "id": "7154a62f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(906,)"
      ]
     },
     "execution_count": 547,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot_regr_poly_cat[2]['regressor'].coef_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "id": "4cc15031",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_transformers = Pipeline(steps=[\n",
    "        ('onehot', OneHotEncoder()),\n",
    "        ('poly',  PolynomialFeatures(interaction_only = True, degree=2, include_bias = True))])\n",
    "\n",
    "num_transformers = Pipeline(steps=[\n",
    "    ('num', StandardScaler())])\n",
    "\n",
    "preprocessor_cat_only = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num_tr', num_transformers, numeric_features),\n",
    "        ('cat_tr', cat_transformers, cat_features)], n_jobs=-1)\n",
    "df_transformed_cat_only = preprocessor_cat_only.fit_transform(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 542,
   "id": "aee0a0b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30000, 906)"
      ]
     },
     "execution_count": 542,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_transformed_cat_only.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 554,
   "id": "2d8cf635",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.56420733, -0.29376767,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.82819616,  1.08171192,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 1.67573926,  0.07201746,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       ...,\n",
       "       [ 0.05210868, -0.11047664,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [-0.90063298, -0.66991272,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.44114486,  0.44975635,  1.        , ...,  0.        ,\n",
       "         0.        ,  0.        ]])"
      ]
     },
     "execution_count": 554,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_transformed_cat_only.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c6efd8",
   "metadata": {},
   "source": [
    "##  LogReg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "id": "b5e0cfad",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 575,
   "id": "a3ae93f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_index = np.random.randint(0, len(df_transformed_cat_only.toarray()), size=int(0.5*len(df_transformed_cat_only.toarray())))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2040a37e",
   "metadata": {},
   "source": [
    "labels_df = np.where(targets_df.values <= 0.5, 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 586,
   "id": "405a36b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_df = targets_df.values.argmax(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 587,
   "id": "0ce44364",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(df_transformed_cat_only.toarray()[random_index], labels_df[random_index], \n",
    "                                                        test_size=0.1, random_state=125)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 589,
   "id": "4dae6960",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n",
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:328: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\"The max_iter was reached which means \"\n"
     ]
    }
   ],
   "source": [
    "clf = LogisticRegressionCV(Cs = [1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2], penalty = 'l1', solver = 'saga', scoring = 'accuracy', multi_class = 'multinomial', cv=5, random_state=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 595,
   "id": "886652b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights_log = clf.predict_proba(df_transformed_cat_only.toarray()[~random_index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 598,
   "id": "ae482a12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15000, 5)"
      ]
     },
     "execution_count": 598,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights_log.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "id": "88b5a5f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15000, 906)"
      ]
     },
     "execution_count": 603,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " df_transformed_cat_only.toarray()[~random_index].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "id": "af2c16ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2000, 5)"
      ]
     },
     "execution_count": 604,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights_log[:2000].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "id": "d8997dd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "env = ContextLinEnvironment(2000, BANDITS, n_action=5, n_dims = 906, \n",
    "                            context = df_transformed_cat_only.toarray()[~random_index][:2000], \n",
    "                            rewards = weights_log[:2000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "id": "6a17890d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_prucb\n",
      "Total reward: 174.51784442795702\n",
      "Total regret: 1575.8750287524429\n",
      "Accuracy: 0.0534999999999999\n",
      "True success probabilities: None\n",
      "Bandits pull count: [2000    0    0    0    0]\n",
      "Estimates of success probability: [[[ 10.27651593]\n",
      "  [-27.45069821]\n",
      "  [151.1777065 ]\n",
      "  ...\n",
      "  [-23.34013819]\n",
      "  [-23.340138  ]\n",
      "  [-23.340138  ]]\n",
      "\n",
      " [[  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  ...\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]]\n",
      "\n",
      " [[  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  ...\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]]\n",
      "\n",
      " [[  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  ...\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]]\n",
      "\n",
      " [[  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  ...\n",
      "  [  0.        ]\n",
      "  [  0.        ]\n",
      "  [  0.        ]]]\n",
      "Reward from all bandit: [174.51784443   0.           0.           0.           0.        ]\n",
      "===============================================\n",
      "CPU times: user 30min 32s, sys: 35 s, total: 31min 7s\n",
      "Wall time: 16min 39s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_prucb_cat_only = Experiment.run(env, type_ = 'lin_prucb', alpha=0.1, beta =0.3, etha=0.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84fb3321",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a0ba14dd",
   "metadata": {},
   "source": [
    "#### Только взаимодействия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "id": "aa57ba28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Ridge())]), score: -0.020666260087705383, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Lasso())]), score: -0.020666028396908134, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', SGDRegressor())]), score: -0.020662624253819976, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'elasticnet'}\n"
     ]
    }
   ],
   "source": [
    "car_regr_int_only = calc_weight_for_route_type(df, degree=1, interaction_only = True, sample=.5, route_type = 'car')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "id": "df0a2b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Ridge())]), score: -0.026993090567741417, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Lasso())]), score: -0.026992872879942915, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', SGDRegressor())]), score: -0.026991231500107498, best_params: {'regressor__alpha': 1e-05, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "ot_regr_int_only = calc_weight_for_route_type(df,  degree=1, interaction_only = True, sample=1, route_type= 'ot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "id": "524013e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Ridge())]), score: -0.03386037582598796, best_params: {'regressor__alpha': 0.1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:530: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 13.43477131067948, tolerance: 0.11988042093623527\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Lasso())]), score: -0.03386036400651994, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', SGDRegressor())]), score: -0.033857818880845235, best_params: {'regressor__alpha': 1e-05, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'elasticnet'}\n"
     ]
    }
   ],
   "source": [
    "pedestrian_regr_int_only = calc_weight_for_route_type(df,  degree=1, interaction_only = True, sample=1, route_type= 'pedestrian')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "id": "94ba0b75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Ridge())]), score: -0.015906123934289022, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Lasso())]), score: -0.015906214353514168, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', SGDRegressor())]), score: -0.01590491074491276, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "bike_regr_int_only = calc_weight_for_route_type(df,  degree=1, interaction_only = True, sample=1, route_type= 'bike')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "id": "7acf8a10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Ridge())]), score: -0.043321673595208235, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', Lasso())]), score: -0.04331672511372955, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures(degree=1, interaction_only=True)),\n",
      "                ('regressor', SGDRegressor())]), score: -0.04332151685927261, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "taxi_regr_int_only = calc_weight_for_route_type(df, degree=1, interaction_only = True, sample=1, route_type= 'taxi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "id": "3a3a4343",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimated_weights_int_only = np.vstack((taxi_regr_int_only[0]['regressor'].coef_,\n",
    "                               car_regr_int_only[0]['regressor'].coef_,\n",
    "                               bike_regr_int_only[0]['regressor'].coef_, \n",
    "                               pedestrian_regr_int_only[0]['regressor'].coef_,\n",
    "                               ot_regr_int_only[0]['regressor'].coef_,\n",
    "                              ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "id": "93af3e46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00000000e+00,  4.25118869e-02, -1.20963764e-17,  0.00000000e+00,\n",
       "        2.59230636e-02,  4.06787944e-02, -5.47403974e-02, -1.12603813e-01,\n",
       "       -7.88571798e-02,  0.00000000e+00,  7.52742973e-02, -1.00233664e-01,\n",
       "        0.00000000e+00, -1.44415240e-01,  1.26065843e-01, -0.00000000e+00,\n",
       "        0.00000000e+00,  1.62746947e-04, -1.14497555e-03,  7.47107719e-04,\n",
       "        9.21637814e-04,  0.00000000e+00, -1.44686215e-01, -1.12699228e-01,\n",
       "       -1.76068006e-01,  4.58171639e-15, -4.50026360e-02,  5.76077724e-16,\n",
       "       -4.68888237e-02,  1.78943426e-15, -1.84310521e-02,  3.46883397e-16,\n",
       "       -3.68968622e-02,  6.56257823e-16, -7.11680096e-02,  0.00000000e+00,\n",
       "       -7.05009025e-02,  0.00000000e+00, -4.86196035e-02,  5.66923507e-16,\n",
       "       -0.00000000e+00, -8.18372752e-03,  9.22767870e-02,  5.49570061e-02,\n",
       "       -1.57862993e-02])"
      ]
     },
     "execution_count": 407,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxi_regr_int_only[1]['regressor'].coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "id": "f9b4183d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 45)"
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimated_weights_int_only.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8cd79f9",
   "metadata": {},
   "source": [
    "#### + степени"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "id": "3264b54a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Ridge())]), score: -0.015419220578596326, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Lasso())]), score: -0.015116112114458985, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', SGDRegressor())]), score: -0.015119727092255083, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "car_regr = calc_weight_for_route_type(df, sample=.5, route_type = 'car')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "id": "a4bac3b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Ridge())]), score: -0.01803801692659007, best_params: {'regressor__alpha': 0.1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:530: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.3596560597955545, tolerance: 0.14441500706487684\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Lasso())]), score: -0.017962159296888616, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', SGDRegressor())]), score: -0.017953730041956033, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'elasticnet'}\n"
     ]
    }
   ],
   "source": [
    "ot_regr = calc_weight_for_route_type(df,  sample=1, route_type= 'ot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "id": "960b3057",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Ridge())]), score: -0.024309696774706974, best_params: {'regressor__alpha': 0.1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:530: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.2035317944383337, tolerance: 0.11842664946815026\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Lasso())]), score: -0.02422188941480904, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', SGDRegressor())]), score: -0.024226350454785626, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "pedestrian_regr = calc_weight_for_route_type(df,  sample=1, route_type= 'pedestrian')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "376061c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Ridge())]), score: -0.011878387232050454, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Lasso())]), score: -0.01182675247280872, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', SGDRegressor())]), score: -0.01182643723172597, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'elasticnet'}\n"
     ]
    }
   ],
   "source": [
    "bike_regr = calc_weight_for_route_type(df,  sample=1, route_type= 'bike')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "025c543a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Ridge())]), score: -0.03193277129895174, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', Lasso())]), score: -0.03179216426236618, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('poly', PolynomialFeatures()), ('regressor', SGDRegressor())]), score: -0.03181162356472199, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "best_regressor_weights_taxi = calc_weight_for_route_type(df,  sample=1, route_type=  'taxi')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54e1686c",
   "metadata": {},
   "source": [
    "predictors[0]['preprocessor'].transformers_[0][1].get_feature_names(cat_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43abd6f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_regressor_weights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "79804840",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2.24620637e-01, -3.60113859e-03, -0.00000000e+00,  1.12116854e-03,\n",
       "        0.00000000e+00, -2.36722887e-03,  0.00000000e+00, -7.82212238e-04,\n",
       "       -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00,  3.68320694e-04, -4.88942988e-02,\n",
       "        1.27357078e-02, -4.72836472e-04, -2.34437282e-02,  1.99731390e-03,\n",
       "        1.95751082e-03,  0.00000000e+00,  0.00000000e+00,  3.21908944e-03,\n",
       "        0.00000000e+00,  1.59301014e-03,  3.25918848e-03,  3.13073256e-03,\n",
       "       -0.00000000e+00,  2.77785852e-02, -0.00000000e+00,  0.00000000e+00,\n",
       "       -1.98347490e-02,  3.03606845e-02, -1.17096309e-02, -0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.01844633e-01,\n",
       "       -3.33899511e-03, -1.77824350e-03,  3.70610485e-03, -3.39637258e-03,\n",
       "        0.00000000e+00, -1.51474029e-01,  0.00000000e+00, -0.00000000e+00,\n",
       "       -3.25394078e-02, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,\n",
       "       -9.03954270e-02, -3.26188617e-02, -3.67784857e-02, -3.89629285e-02,\n",
       "       -0.00000000e+00, -0.00000000e+00,  2.08342121e-03,  0.00000000e+00,\n",
       "       -6.34549968e-03, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00,\n",
       "       -1.33959885e-03, -2.75851063e-04,  0.00000000e+00, -1.06129727e-04,\n",
       "       -0.00000000e+00,  7.44418107e-04,  0.00000000e+00,  0.00000000e+00,\n",
       "       -0.00000000e+00,  4.08272209e-03,  1.07841107e-03, -3.40590202e-03,\n",
       "       -0.00000000e+00, -6.04953152e-03, -0.00000000e+00, -0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00,  3.57473393e-04,  0.00000000e+00,\n",
       "        1.43751452e-02,  1.85711518e-03, -0.00000000e+00,  0.00000000e+00,\n",
       "        1.03496394e-02, -0.00000000e+00, -0.00000000e+00,  1.18559448e-03,\n",
       "       -6.19331319e-03,  1.36451878e-03,  7.02872210e-04,  0.00000000e+00,\n",
       "       -0.00000000e+00, -0.00000000e+00, -2.00321985e-02, -4.85606889e-02,\n",
       "       -0.00000000e+00, -2.12294035e-02, -1.32194899e-02,  0.00000000e+00,\n",
       "       -3.59031527e-04,  7.80894115e-04, -0.00000000e+00,  5.08691220e-03,\n",
       "        2.23087586e-02,  5.43625278e-03,  1.75422756e-02,  3.72637864e-04,\n",
       "        7.28929928e-03,  0.00000000e+00,  3.93283997e-02, -0.00000000e+00,\n",
       "        3.91191075e-03, -0.00000000e+00, -1.73560549e-04,  2.92112532e-05,\n",
       "        0.00000000e+00,  2.60974169e-04,  6.78637755e-04,  2.02718975e-02,\n",
       "        9.18814992e-05,  0.00000000e+00,  8.19129714e-05,  1.72193080e-02,\n",
       "        0.00000000e+00,  1.01201966e-02,  6.90179598e-03, -6.74150691e-05,\n",
       "        4.49190620e-02])"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_regr[1]['regressor'].coef_[ot_regr[1]['regressor'].coef_ > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "id": "25fc16af",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimated_weights = np.vstack((best_regressor_weights_taxi[2]['regressor'].coef_,\n",
    "                               car_regr[2]['regressor'].coef_,\n",
    "                               bike_regr[2]['regressor'].coef_, \n",
    "                               pedestrian_regr[2]['regressor'].coef_,\n",
    "                               ot_regr[2]['regressor'].coef_,\n",
    "                              ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "b8d948ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 1035)"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimated_weights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "5bf0747d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "c0531539",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({4: 14457, 1: 14828, 2: 588, 0: 92, 3: 35})"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter((df_transformed_with_polinomial[:30000] @ estimated_weights.T).argmax(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "id": "f2fb5dd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({1: 2163, 0: 2779, 4: 39, 2: 8, 3: 11})"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter((df_transformed[:5000] @ estimated_weights_wo_poly.T).argmax(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "id": "d69cbbbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({3: 4705, 2: 226, 4: 65, 0: 4})"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter((df_transformed_with_polinomial_int_only[:5000] @ estimated_weights_int_only.T).argmax(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "86d91b83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 1035)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimated_weights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "e3e217d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessor_scaler = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('cat', OneHotEncoder(), cat_features),\n",
    "            ('num', StandardScaler(), numeric_features)])\n",
    "df_transformed = preprocessor_scaler.fit_transform(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "id": "2d889c65",
   "metadata": {},
   "outputs": [],
   "source": [
    "poly_int_only = PolynomialFeatures(degree=1, interaction_only=True, include_bias = True) \n",
    "df_transformed_with_polinomial_int_only = poly_int_only.fit_transform(df_transformed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a058066",
   "metadata": {},
   "outputs": [],
   "source": [
    "poly = PolynomialFeatures(degree=1, include_bias = True) \n",
    "df_transformed_with_polinomial = poly.fit_transform(df_transformed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44368540",
   "metadata": {},
   "source": [
    "### Без полиномиальных признаков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "1315fe12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.02151255434615761, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.02150880157037004, best_params: {'regressor__alpha': 0.0001}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.021510890777690427, best_params: {'regressor__alpha': 1e-05, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "car_regr_wo_poly = calc_weight_for_route_type(df, 'car',  sample=1, include_poly_features = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "a0aa6ac7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.027393796647331502, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.027393813072402184, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.027392380183537006, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "ot_regr_wo_poly = calc_weight_for_route_type(df, 'ot', sample=1, include_poly_features = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "cbc7c375",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.015965220680661037, best_params: {'regressor__alpha': 0.1}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.015965143450513322, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.015964642724507216, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "bike_regr_wo_poly = calc_weight_for_route_type(df, 'bike',  sample=1, include_poly_features = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "3e4263c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.03271119867336863, best_params: {'regressor__alpha': 0.1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:530: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.8805823666643846, tolerance: 0.11543647219524396\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.03271131048011446, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.03271083034427078, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'elasticnet'}\n"
     ]
    }
   ],
   "source": [
    "pedestrian_regr_wo_poly = calc_weight_for_route_type(df, 'pedestrian', sample=1, include_poly_features = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "1c66e4b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Ridge())]), score: -0.04266546909825315, best_params: {'regressor__alpha': 0.1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sinvic/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:530: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.222372297748393, tolerance: 0.1571713907572682\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', Lasso())]), score: -0.042665192138510735, best_params: {'regressor__alpha': 1e-05}\n",
      "Model Pipeline(steps=[('preprocessor',\n",
      "                 ColumnTransformer(n_jobs=-1,\n",
      "                                   transformers=[('cat', OneHotEncoder(),\n",
      "                                                  Index(['sex', 'age', 'has_vehicle', 'income', 'has_spouse', 'балл_пробок',\n",
      "       'дождь', 'снег', 'туман', 'мгла', 'гроза', 'метель', 'гололёд',\n",
      "       'изморозь', 'облачный день'],\n",
      "      dtype='object')),\n",
      "                                                 ('num', StandardScaler(),\n",
      "                                                  Index(['ветер', 'температура'], dtype='object'))])),\n",
      "                ('regressor', SGDRegressor())]), score: -0.04266484595604295, best_params: {'regressor__alpha': 0.0001, 'regressor__learning_rate': 'adaptive', 'regressor__loss': 'squared_loss', 'regressor__penalty': 'l2'}\n"
     ]
    }
   ],
   "source": [
    "taxi_regr_wo_poly = calc_weight_for_route_type(df, 'taxi',  sample=1, include_poly_features = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "4e881dd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimated_weights_wo_poly = np.vstack((car_regr_wo_poly[2]['regressor'].coef_, \n",
    "          ot_regr_wo_poly[2]['regressor'].coef_,\n",
    "          bike_regr_wo_poly[2]['regressor'].coef_,\n",
    "          pedestrian_regr_wo_poly[2]['regressor'].coef_,\n",
    "          taxi_regr_wo_poly[2]['regressor'].coef_,))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "e4f1499f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 44)"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimated_weights_wo_poly.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "77926abf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00094524, -0.00094524,  0.00683833,  0.02139666,  0.01658529,\n",
       "       -0.00148063, -0.04333965, -0.13358469,  0.13358469,  0.01871185,\n",
       "        0.00244024,  0.00701066, -0.00933661, -0.01882615, -0.13358469,\n",
       "        0.13358469,  0.08052298,  0.0798434 ,  0.08484117,  0.08464296,\n",
       "        0.08386415, -0.21345883, -0.20025585, -0.03662428,  0.03662428,\n",
       "       -0.00969959,  0.00969959, -0.01498765,  0.01498765, -0.00272506,\n",
       "        0.00272506, -0.00797142,  0.00797142, -0.01858091,  0.01858091,\n",
       "       -0.01421766,  0.01421766, -0.01457921,  0.01457921, -0.01124499,\n",
       "       -0.01153028,  0.02277527,  0.03341155, -0.01186178])"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_regr_wo_poly[0]['regressor'].coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b312ac0",
   "metadata": {},
   "source": [
    "## GridSearch Polinomial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28576137",
   "metadata": {},
   "outputs": [],
   "source": [
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1bb6ac6",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.5),\n",
    "                    'beta': np.arange(0.1, 1.5, 0.5),\n",
    "                    'etha': np.arange(0.8, 0.95, 0.05)}, run_number = 3, n_action=5, n_dims = 1035, \n",
    "                    type_= 'lin_prucb', n_iter=2000, generate_stats=False, \n",
    "                    context = df_transformed_with_polinomial[:2000], rewards = targets_df.values[:2000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56a0bff8",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.5)}, run_number = 3, \n",
    "                    type_= 'ucb1', n_iter=2000, generate_stats=False, \n",
    "                    context = df_transformed_with_polinomial[:2000], rewards = targets_df.values[:2000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "984feb85",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.2)}, run_number = 3, n_action=5, n_dims = 1035,\n",
    "                    type_= 'lin_ucb', n_iter=2000, generate_stats=False,\n",
    "                    context = df_transformed_with_polinomial[:2000], rewards = targets_df.values[:2000])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8895bcc3",
   "metadata": {},
   "source": [
    "## GridSearch W/O Polinomial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "id": "88b18ab1",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums_to_choose_hyperparam = 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "id": "9052d756",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "245it [04:31,  1.11s/it]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "((('alpha', 0.1), ('beta', 0.30000000000000004), ('etha', 0.7)),\n",
       " {(('alpha', 0.1), ('beta', 0.1), ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 0.1), ('beta', 0.1), ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 0.1), ('beta', 0.1), ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.1),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.30000000000000004),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.5000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.7000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 0.9000000000000001),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.1000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.7)): 0.4915225325419292,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.75)): 0.4915225325419292,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8)): 0.4915225325419292,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.8500000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.1),\n",
       "   ('etha', 0.9000000000000001)): 0.4915225325419292,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.30000000000000004),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.5000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.7000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 0.9000000000000001),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.1000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.7)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.75)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.8500000000000001)): 0.5298895193870438,\n",
       "  (('alpha', 1.3000000000000003),\n",
       "   ('beta', 1.3000000000000003),\n",
       "   ('etha', 0.9000000000000001)): 0.5298895193870438})"
      ]
     },
     "execution_count": 360,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.2),\n",
    "                    'beta': np.arange(0.1, 1.5, 0.2),\n",
    "                    'etha': np.arange(0.7, 0.95, 0.05)}, run_number = 3, \n",
    "                    type_= 'lin_prucb', n_iter=nums_to_choose_hyperparam, generate_stats=False, n_action=5, n_dims = 44,\n",
    "                    context = df_transformed[:nums_to_choose_hyperparam], thetas = estimated_weights_wo_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "3daa6ea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "14it [00:00, 21.13it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "((('alpha', 0.1),),\n",
       " {(('alpha', 0.1),): 0.32423203393485944,\n",
       "  (('alpha', 0.2),): 0.32423203393485944,\n",
       "  (('alpha', 0.30000000000000004),): 0.32423203393485944,\n",
       "  (('alpha', 0.4),): 0.32423203393485944,\n",
       "  (('alpha', 0.5),): 0.32423203393485944,\n",
       "  (('alpha', 0.6),): 0.32423203393485944,\n",
       "  (('alpha', 0.7000000000000001),): 0.32423203393485944,\n",
       "  (('alpha', 0.8),): 0.32423203393485944,\n",
       "  (('alpha', 0.9),): 0.32423203393485944,\n",
       "  (('alpha', 1.0),): 0.32423203393485944,\n",
       "  (('alpha', 1.1),): 0.32423203393485944,\n",
       "  (('alpha', 1.2000000000000002),): 0.32423203393485944,\n",
       "  (('alpha', 1.3000000000000003),): 0.32423203393485944,\n",
       "  (('alpha', 1.4000000000000001),): 0.32423203393485944})"
      ]
     },
     "execution_count": 356,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.1)}, run_number = 3, \n",
    "                    type_= 'ucb1', n_iter=nums_to_choose_hyperparam, generate_stats=False, \n",
    "                    context = df_transformed[:nums_to_choose_hyperparam], thetas = estimated_weights_wo_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "2f9fa627",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "14it [00:09,  1.42it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "((('alpha', 0.1),),\n",
       " {(('alpha', 0.1),): 0.5424884876964682,\n",
       "  (('alpha', 0.2),): 0.5424884876964682,\n",
       "  (('alpha', 0.30000000000000004),): 0.5424884876964682,\n",
       "  (('alpha', 0.4),): 0.5424884876964682,\n",
       "  (('alpha', 0.5),): 0.5424884876964682,\n",
       "  (('alpha', 0.6),): 0.5424884876964682,\n",
       "  (('alpha', 0.7000000000000001),): 0.5424884876964682,\n",
       "  (('alpha', 0.8),): 0.5424884876964682,\n",
       "  (('alpha', 0.9),): 0.5424884876964682,\n",
       "  (('alpha', 1.0),): 0.5424884876964682,\n",
       "  (('alpha', 1.1),): 0.5424884876964682,\n",
       "  (('alpha', 1.2000000000000002),): 0.5424884876964682,\n",
       "  (('alpha', 1.3000000000000003),): 0.5424884876964682,\n",
       "  (('alpha', 1.4000000000000001),): 0.5424884876964682})"
      ]
     },
     "execution_count": 359,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search_context({'alpha': np.arange(0.1, 1.5, 0.1)}, run_number = 3, \n",
    "                    type_= 'lin_ucb', n_iter=nums_to_choose_hyperparam, generate_stats=False, n_action=5, n_dims = 44, \n",
    "                    context = df_transformed[:nums_to_choose_hyperparam], thetas = estimated_weights_wo_poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "929daaef",
   "metadata": {},
   "source": [
    "# Эксперименты с алгоритмами многоруких бандитов"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9003c92",
   "metadata": {},
   "source": [
    "### C полиномами "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "id": "9934aeb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "env = ContextLinEnvironment(2000, BANDITS, n_action=5, n_dims = 1035, context = df_transformed_with_polinomial[nums_to_choose_hyperparam:nums_to_choose_hyperparam + 2000], thetas = estimated_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "id": "af54fda3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_prucb\n",
      "Total reward: 327.57249640231254\n",
      "Total regret: 259.0159685905873\n",
      "Accuracy: 0.41850000000000026\n",
      "True success probabilities: [[ 0.          0.00425316 -0.00425316 ...  0.00489676  0.00773067\n",
      "   0.07427711]\n",
      " [ 0.         -0.00055656  0.00055656 ...  0.00717382 -0.00044826\n",
      "   0.04460082]\n",
      " [ 0.         -0.00367254  0.00367254 ... -0.00940059 -0.00649664\n",
      "  -0.04202019]\n",
      " [ 0.         -0.0016364   0.0016364  ... -0.00356438 -0.00770169\n",
      "  -0.05516258]\n",
      " [ 0.          0.00225586 -0.00225586 ...  0.00089373  0.00368823\n",
      "   0.04360712]]\n",
      "Bandits pull count: [   3    7    1 1989    0]\n",
      "Estimates of success probability: [[[-3.04414892e+00]\n",
      "  [-2.34974514e+00]\n",
      "  [-2.38836627e-01]\n",
      "  ...\n",
      "  [-1.28003020e+00]\n",
      "  [ 1.14217364e+00]\n",
      "  [-1.33238064e+00]]\n",
      "\n",
      " [[-2.36786417e+00]\n",
      "  [-1.95125354e+00]\n",
      "  [-7.13476842e-02]\n",
      "  ...\n",
      "  [-3.13281393e-01]\n",
      "  [ 1.46334579e+00]\n",
      "  [-2.34824029e-01]]\n",
      "\n",
      " [[-3.10854770e+00]\n",
      "  [-2.61495529e+00]\n",
      "  [-1.68355478e-02]\n",
      "  ...\n",
      "  [-1.36166089e+00]\n",
      "  [ 1.56585526e+00]\n",
      "  [-2.60498915e+00]]\n",
      "\n",
      " [[ 2.85274865e+02]\n",
      "  [ 1.25524161e+02]\n",
      "  [ 1.17654924e+02]\n",
      "  ...\n",
      "  [ 1.53553249e+02]\n",
      "  [-6.07519766e+01]\n",
      "  [ 1.35100998e+02]]\n",
      "\n",
      " [[ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  ...\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]]]\n",
      "Reward from all bandit: [-1.66382748e-01  6.20206222e-01 -2.51971237e-01  3.27370644e+02\n",
      "  0.00000000e+00]\n",
      "===============================================\n"
     ]
    }
   ],
   "source": [
    "#  alpha = 1.5, beta = 1.5, etha = 0.9\n",
    "exp_lin_prucb_with_polinomial = Experiment.run(env, type_ = 'lin_prucb', alpha=0.1, beta =0.3, etha=0.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "id": "9e6f16ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: ucb1\n",
      "Total reward: 197.69315347035842\n",
      "Total regret: 388.8953115225418\n",
      "Accuracy: 0.33466933867735477\n",
      "Bandits pull count: [ 188  183  150 1393   86]\n",
      "Reward from all bandit: [ -3.47723958  -4.26284549  -7.94878762 226.85907965 -13.47705349]\n",
      "Reward estimate all bandit: [-0.01839809 -0.02316764 -0.05264098  0.16273966 -0.15490866]\n",
      "===============================================\n",
      "CPU times: user 151 ms, sys: 4.06 ms, total: 155 ms\n",
      "Wall time: 93.6 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_ucb_with_polinomial = Experiment.run(env, type_ = 'ucb1', alpha = 0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "id": "daa27aac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_ucb\n",
      "Total reward: 327.57249640231254\n",
      "Total regret: 259.0159685905873\n",
      "Accuracy: 0.41850000000000026\n",
      "True success probabilities: [[ 0.          0.00425316 -0.00425316 ...  0.00489676  0.00773067\n",
      "   0.07427711]\n",
      " [ 0.         -0.00055656  0.00055656 ...  0.00717382 -0.00044826\n",
      "   0.04460082]\n",
      " [ 0.         -0.00367254  0.00367254 ... -0.00940059 -0.00649664\n",
      "  -0.04202019]\n",
      " [ 0.         -0.0016364   0.0016364  ... -0.00356438 -0.00770169\n",
      "  -0.05516258]\n",
      " [ 0.          0.00225586 -0.00225586 ...  0.00089373  0.00368823\n",
      "   0.04360712]]\n",
      "Bandits pull count: [   3    7    1 1989    0]\n",
      "Estimates of success probability: [[[-3.07941631e-03]\n",
      "  [ 1.11588708e-03]\n",
      "  [-3.79869092e-03]\n",
      "  ...\n",
      "  [-3.06678354e-05]\n",
      "  [ 3.15581756e-04]\n",
      "  [ 4.97815978e-04]]\n",
      "\n",
      " [[ 2.20753494e-03]\n",
      "  [ 1.88621811e-03]\n",
      "  [-5.98476018e-05]\n",
      "  ...\n",
      "  [ 4.02901733e-03]\n",
      "  [ 1.40360010e-03]\n",
      "  [ 4.68058533e-03]]\n",
      "\n",
      " [[-2.74265312e-03]\n",
      "  [-2.74265312e-03]\n",
      "  [ 5.20228745e-04]\n",
      "  ...\n",
      "  [-1.07607877e-03]\n",
      "  [ 5.68204077e-03]\n",
      "  [-1.61709810e-02]]\n",
      "\n",
      " [[ 5.36802595e-03]\n",
      "  [ 2.36181102e-03]\n",
      "  [ 2.21409904e-03]\n",
      "  ...\n",
      "  [ 2.88954489e-03]\n",
      "  [-1.14310790e-03]\n",
      "  [ 2.54232874e-03]]\n",
      "\n",
      " [[ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  ...\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]\n",
      "  [ 0.00000000e+00]]]\n",
      "Reward from all bandit: [-1.66382748e-01  6.20206222e-01 -2.51971237e-01  3.27370644e+02\n",
      "  0.00000000e+00]\n",
      "===============================================\n",
      "CPU times: user 15min 13s, sys: 11.4 s, total: 15min 24s\n",
      "Wall time: 7min 56s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_ucb_with_polinomial = Experiment.run(env, type_ = 'lin_ucb', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "id": "a6f18060",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: random\n",
      "Total reward: -23.695987059830493\n",
      "Total regret: 610.2844520527298\n",
      "Accuracy: 0.19240379810094954\n",
      "Bandits pull count: [403 362 397 399 439]\n",
      "Reward from all bandit: [ -1.19006518  -3.49333696 -17.12765886  61.62704566 -63.51197172]\n",
      "Reward estimate all bandit: [-0.00294571 -0.00962352 -0.04303432  0.15406761 -0.14434539]\n",
      "===============================================\n",
      "CPU times: user 99.5 ms, sys: 10.1 ms, total: 110 ms\n",
      "Wall time: 68 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_random_with_polinomial = Experiment.run(env, type_ = 'random');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2702bdb3",
   "metadata": {},
   "source": [
    "## Полиномы только для категориальных признаков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "id": "eb843949",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums_to_test = 5000\n",
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "env = ContextLinEnvironment(nums_to_test, BANDITS, n_action=5, n_dims = df_transformed_cat_only.shape[1], context = df_transformed_cat_only.toarray()[nums_to_choose_hyperparam:nums_to_choose_hyperparam + nums_to_test], thetas = estimated_weights_cat_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "id": "3dc75e94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_prucb\n",
      "Total reward: 279.47092112760265\n",
      "Total regret: 988.6798268675838\n",
      "Accuracy: 0.39760000000000073\n",
      "True success probabilities: [[ 5.90088570e-02 -1.49712287e-02 -2.46548194e-14 ...  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]\n",
      " [ 3.54784284e-02 -1.07421172e-02 -3.25200188e-14 ...  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]\n",
      " [-3.19187117e-02  1.49945933e-02 -8.06097648e-14 ...  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]\n",
      " [-4.83495940e-02  1.67380525e-02 -1.15471157e-13 ...  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]\n",
      " [ 3.55842003e-02 -9.54093646e-03  3.00483559e-14 ...  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]]\n",
      "Bandits pull count: [  25    1 2090    1 2883]\n",
      "Estimates of success probability: [[[  4.68614323]\n",
      "  [ -0.64416242]\n",
      "  [ -2.92035222]\n",
      "  ...\n",
      "  [  0.44613092]\n",
      "  [  0.44613092]\n",
      "  [  0.44613092]]\n",
      "\n",
      " [[  2.36446955]\n",
      "  [  1.11638785]\n",
      "  [ -3.1670299 ]\n",
      "  ...\n",
      "  [  0.4849666 ]\n",
      "  [  0.4849666 ]\n",
      "  [  0.4849666 ]]\n",
      "\n",
      " [[-70.96040806]\n",
      "  [ 10.87202057]\n",
      "  [ 61.57572941]\n",
      "  ...\n",
      "  [ -9.43879289]\n",
      "  [ -9.43879288]\n",
      "  [ -9.43879288]]\n",
      "\n",
      " [[  2.06769172]\n",
      "  [  1.04887095]\n",
      "  [ -2.93445985]\n",
      "  ...\n",
      "  [  0.44949199]\n",
      "  [  0.44949199]\n",
      "  [  0.44949199]]\n",
      "\n",
      " [[ 26.04797041]\n",
      "  [-40.64436156]\n",
      "  [180.91931469]\n",
      "  ...\n",
      "  [-27.93951549]\n",
      "  [-27.93951562]\n",
      "  [-27.93951562]]]\n",
      "Reward from all bandit: [-3.31498089e-02 -3.18663164e-01  7.10145222e+01 -5.06185118e-02\n",
      "  2.08858830e+02]\n",
      "===============================================\n"
     ]
    }
   ],
   "source": [
    "\n",
    "exp_lin_prucb_cat_only = Experiment.run(env, type_ = 'lin_prucb', alpha=0.1, beta =0.3, etha=0.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "id": "d60c8fc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_ucb\n",
      "Total reward: 2936.2138555173633\n",
      "Total regret: 1658.7436175183518\n",
      "Accuracy: 0.027400000000000025\n",
      "True success probabilities: [[ 0.05878252 -0.01493844  0.11407362 ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.03527802 -0.01085129  0.11040502 ...  0.          0.\n",
      "   0.        ]\n",
      " [-0.03159572  0.01452424  0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [-0.0475917   0.01664818  0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [ 0.03544996 -0.00922286  0.12550387 ...  0.          0.\n",
      "   0.        ]]\n",
      "Bandits pull count: [5000    0    0    0    0]\n",
      "Estimates of success probability: [[[-0.00022477]\n",
      "  [-0.0011147 ]\n",
      "  [ 0.00648039]\n",
      "  ...\n",
      "  [-0.00099973]\n",
      "  [-0.00099973]\n",
      "  [-0.00099973]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  ...\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  ...\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  ...\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  ...\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]]\n",
      "Reward from all bandit: [2936.21385552    0.            0.            0.            0.        ]\n",
      "===============================================\n"
     ]
    }
   ],
   "source": [
    "exp_lin_ucb_cat_only = Experiment.run(env, type_ = 'lin_ucb', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 558,
   "id": "e9d92964",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: ucb1\n",
      "Total reward: 3401.637357980026\n",
      "Total regret: 1193.32011505569\n",
      "Accuracy: 0.42313851080864673\n",
      "Bandits pull count: [ 485 1134   37   51 3293]\n",
      "Reward from all bandit: [ 289.89527917  750.64876668    3.97402423   10.74183119 2346.37745671]\n",
      "Reward estimate all bandit: [0.59649234 0.66136455 0.10457959 0.20657368 0.7123186 ]\n",
      "===============================================\n"
     ]
    }
   ],
   "source": [
    "exp_ucb_int_cat_only = Experiment.run(env, type_ = 'ucb1', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 559,
   "id": "338b6d8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: random\n",
      "Total reward: 2282.3890612867635\n",
      "Total regret: 2312.5684117489423\n",
      "Accuracy: 0.195160967806439\n",
      "Bandits pull count: [ 968  970 1035  974 1053]\n",
      "Reward from all bandit: [557.87144889 643.16623945 125.27388618 200.1177207  755.95976607]\n",
      "Reward estimate all bandit: [0.57571873 0.66237512 0.12092074 0.20524894 0.71722938]\n",
      "===============================================\n"
     ]
    }
   ],
   "source": [
    "exp_random_cat_only = Experiment.run(env, type_ = 'random', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c8baca6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1eee5845",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d28275b2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d41add3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa696239",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c03ccd9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d89cda66",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66a85ed2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3fa06c4f",
   "metadata": {},
   "source": [
    "## Только взаимодействия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "7de51d30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 45)"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimated_weights_int_only.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "c72a6b7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45"
      ]
     },
     "execution_count": 399,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_transformed_with_polinomial_int_only.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "id": "b9c12b72",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums_to_test = 5000\n",
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "env = ContextLinEnvironment(nums_to_test, BANDITS, n_action=5, n_dims = df_transformed_with_polinomial_int_only.shape[1], context = df_transformed_with_polinomial_int_only[nums_to_choose_hyperparam:nums_to_choose_hyperparam+nums_to_test], thetas = estimated_weights_int_only)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "id": "0b839a12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_prucb\n",
      "Total reward: 450.8558967050891\n",
      "Total regret: 868.7422357851224\n",
      "Accuracy: 0.24540000000000056\n",
      "True success probabilities: [[ 0.          0.0214787  -0.0214787   0.02043647  0.04677647  0.06111707\n",
      "  -0.03521943 -0.09311058 -0.01965845  0.01965845  0.08413963 -0.09228417\n",
      "   0.00844728 -0.13708259  0.13677985 -0.01965845  0.01965845  0.05088425\n",
      "   0.03468717  0.03799021  0.0380494   0.03675668 -0.10845455 -0.08991316\n",
      "  -0.0883091   0.0883091  -0.02267527  0.02267527 -0.02578883  0.02578883\n",
      "  -0.01502827  0.01502827 -0.01947355  0.01947355 -0.0368061   0.0368061\n",
      "  -0.03835769  0.03835769 -0.02688454  0.02688454 -0.02719502 -0.03787797\n",
      "   0.065073    0.05506234 -0.01584778]\n",
      " [ 0.          0.00092489 -0.00092489  0.0068113   0.02554304  0.01828015\n",
      "   0.00325503 -0.05388952 -0.13320743  0.13320743  0.01653047 -0.00399311\n",
      "   0.00567398 -0.00809166 -0.01011969 -0.13320743  0.13320743  0.10847543\n",
      "   0.07525326  0.08749471  0.08343874  0.0804589  -0.22531202 -0.20980902\n",
      "  -0.03432036  0.03432036 -0.01016446  0.01016446 -0.01184634  0.01184634\n",
      "  -0.02526314  0.02526314 -0.00955176  0.00955176 -0.01616977  0.01616977\n",
      "  -0.01631712  0.01631712 -0.02052116  0.02052116 -0.02329785 -0.00214707\n",
      "   0.02544491  0.0324454  -0.01100256]\n",
      " [ 0.         -0.01611895  0.01611895  0.0106157   0.02952097  0.00616863\n",
      "  -0.01340718 -0.03289812 -0.00037286  0.00037286 -0.00344052  0.00136091\n",
      "  -0.00209529 -0.00428038  0.00845528 -0.00037286  0.00037286 -0.11953989\n",
      "  -0.10246818 -0.10370057 -0.10480895 -0.10481167  0.27589986  0.25942941\n",
      "   0.02863119 -0.02863119  0.00572771 -0.00572771  0.01342108 -0.01342108\n",
      "   0.00599104 -0.00599104  0.01142167 -0.01142167  0.01879453 -0.01879453\n",
      "   0.01106327 -0.01106327  0.02407444 -0.02407444  0.01535715  0.00428531\n",
      "  -0.01964246 -0.03259644  0.01082458]\n",
      " [ 0.         -0.00445243  0.00445243  0.09648407  0.12261561  0.00707698\n",
      "  -0.07950941 -0.14666726  0.021372   -0.021372   -0.02532282  0.02354909\n",
      "  -0.00706154  0.02463538 -0.01580011  0.021372   -0.021372   -0.05778487\n",
      "  -0.0486947  -0.05319642 -0.05278787 -0.05164309  0.12364155  0.1404654\n",
      "   0.06413112 -0.06413112  0.01953283 -0.01953283  0.01575739 -0.01575739\n",
      "   0.01634815 -0.01634815  0.01926954 -0.01926954  0.02578164 -0.02578164\n",
      "   0.02516443 -0.02516443  0.03099881 -0.03099881  0.03608827  0.01148992\n",
      "  -0.04757819 -0.0448667   0.00853803]\n",
      " [ 0.          0.00213726 -0.00213726  0.07101908  0.06822769 -0.01323037\n",
      "  -0.05593196 -0.07008445  0.08785198 -0.08785198 -0.00776193  0.01817619\n",
      "   0.02613427 -0.01179205 -0.02475647  0.08785198 -0.08785198 -0.00111929\n",
      "  -0.02710077 -0.02467453 -0.0267703  -0.02950755  0.04163742  0.06753502\n",
      "  -0.05933364  0.05933364 -0.00828722  0.00828722 -0.01791943  0.01791943\n",
      "  -0.00729617  0.00729617 -0.00995196  0.00995196 -0.0277496   0.0277496\n",
      "  -0.02577904  0.02577904 -0.02187505  0.02187505 -0.02181492 -0.01615404\n",
      "   0.03796896  0.03339225 -0.00743852]]\n",
      "Bandits pull count: [   2    2    3 4991    2]\n",
      "Estimates of success probability: [[[-2.26833390e+00]\n",
      "  [ 5.79897737e-01]\n",
      "  [-1.64391698e+00]\n",
      "  [ 1.05000895e+00]\n",
      "  [-1.43249207e+00]\n",
      "  [ 9.92456309e-01]\n",
      "  [ 7.34702622e-01]\n",
      "  [ 1.20424892e+00]\n",
      "  [-7.87724686e-02]\n",
      "  [-9.85246775e-01]\n",
      "  [ 9.81337626e-02]\n",
      "  [ 1.02274152e+00]\n",
      "  [-9.73782799e-01]\n",
      "  [ 1.20429982e+00]\n",
      "  [ 1.19753243e+00]\n",
      "  [-7.87724686e-02]\n",
      "  [-9.85246775e-01]\n",
      "  [ 1.20431466e+00]\n",
      "  [ 1.17698241e+00]\n",
      "  [ 9.46788268e-01]\n",
      "  [-9.22914495e-01]\n",
      "  [ 1.02935880e+00]\n",
      "  [ 3.18709752e-01]\n",
      "  [ 1.20431466e+00]\n",
      "  [-8.08973105e-01]\n",
      "  [-2.55046138e-01]\n",
      "  [-2.56866322e-01]\n",
      "  [-8.07152922e-01]\n",
      "  [-2.26833390e+00]\n",
      "  [ 1.20431466e+00]\n",
      "  [-2.26833390e+00]\n",
      "  [ 1.20431466e+00]\n",
      "  [-2.26819948e+00]\n",
      "  [ 1.20418024e+00]\n",
      "  [-2.22797985e+00]\n",
      "  [ 1.16396061e+00]\n",
      "  [-2.26833390e+00]\n",
      "  [ 1.20431466e+00]\n",
      "  [-2.21068526e+00]\n",
      "  [ 1.14666601e+00]\n",
      "  [ 1.20426865e+00]\n",
      "  [ 1.20424513e+00]\n",
      "  [-2.26821837e+00]\n",
      "  [ 1.36298793e+00]\n",
      "  [ 2.40090293e+00]]\n",
      "\n",
      " [[-2.20804371e+00]\n",
      "  [ 6.26337478e-01]\n",
      "  [-1.73596775e+00]\n",
      "  [ 9.44107725e-01]\n",
      "  [-1.10630619e+00]\n",
      "  [ 1.02587031e+00]\n",
      "  [ 6.28801394e-01]\n",
      "  [ 6.93136780e-01]\n",
      "  [-4.37544065e-01]\n",
      "  [-6.72086211e-01]\n",
      "  [-2.07923573e-02]\n",
      "  [ 1.34892698e+00]\n",
      "  [-1.33255440e+00]\n",
      "  [ 1.09839860e+00]\n",
      "  [ 1.09163120e+00]\n",
      "  [-4.37544065e-01]\n",
      "  [-6.72086211e-01]\n",
      "  [ 1.09841343e+00]\n",
      "  [ 1.05805587e+00]\n",
      "  [ 8.67762810e-01]\n",
      "  [-1.02881530e+00]\n",
      "  [ 9.23457568e-01]\n",
      "  [ 3.65149069e-01]\n",
      "  [ 1.09841343e+00]\n",
      "  [-7.48682910e-01]\n",
      "  [-3.60947366e-01]\n",
      "  [-7.67978464e-01]\n",
      "  [-3.41651813e-01]\n",
      "  [-2.20804371e+00]\n",
      "  [ 1.09841343e+00]\n",
      "  [-2.20804371e+00]\n",
      "  [ 1.09841343e+00]\n",
      "  [-2.20790929e+00]\n",
      "  [ 1.09827901e+00]\n",
      "  [-2.16768966e+00]\n",
      "  [ 1.05805938e+00]\n",
      "  [-2.64013039e+00]\n",
      "  [ 1.53050012e+00]\n",
      "  [-2.58248217e+00]\n",
      "  [ 1.47285189e+00]\n",
      "  [ 1.09836742e+00]\n",
      "  [ 1.09834391e+00]\n",
      "  [-2.20792817e+00]\n",
      "  [ 3.70877271e+00]\n",
      "  [ 1.95302933e+00]]\n",
      "\n",
      " [[-2.27939322e+00]\n",
      "  [ 7.32608974e-01]\n",
      "  [-1.80639444e+00]\n",
      "  [ 1.05130205e+00]\n",
      "  [-1.49578737e+00]\n",
      "  [ 9.82319398e-01]\n",
      "  [ 7.99661710e-01]\n",
      "  [ 1.20554202e+00]\n",
      "  [ 1.38527165e-01]\n",
      "  [-1.21231263e+00]\n",
      "  [ 8.64015451e-02]\n",
      "  [ 1.02403462e+00]\n",
      "  [-9.71816801e-01]\n",
      "  [ 1.20559292e+00]\n",
      "  [ 1.19882553e+00]\n",
      "  [ 1.38527165e-01]\n",
      "  [-1.21231263e+00]\n",
      "  [ 1.20560776e+00]\n",
      "  [ 1.16525020e+00]\n",
      "  [ 9.48081366e-01]\n",
      "  [-8.57955407e-01]\n",
      "  [ 8.15318258e-01]\n",
      "  [ 4.72343395e-01]\n",
      "  [ 1.20560776e+00]\n",
      "  [-6.69287184e-01]\n",
      "  [-4.04498279e-01]\n",
      "  [-1.91907233e-01]\n",
      "  [-8.81878230e-01]\n",
      "  [-2.21480482e+00]\n",
      "  [ 1.14101936e+00]\n",
      "  [-2.12864798e+00]\n",
      "  [ 1.05486252e+00]\n",
      "  [-2.27925880e+00]\n",
      "  [ 1.20547334e+00]\n",
      "  [-2.08829393e+00]\n",
      "  [ 1.01450847e+00]\n",
      "  [-2.27939322e+00]\n",
      "  [ 1.20560776e+00]\n",
      "  [-2.22174457e+00]\n",
      "  [ 1.14795911e+00]\n",
      "  [ 1.20556175e+00]\n",
      "  [ 1.20553823e+00]\n",
      "  [-2.27927768e+00]\n",
      "  [ 1.04482267e+00]\n",
      "  [ 2.86452177e+00]]\n",
      "\n",
      " [[ 2.93291633e+02]\n",
      "  [ 5.96252547e+01]\n",
      "  [ 7.74059851e+01]\n",
      "  [ 1.44805468e+01]\n",
      "  [ 4.79566759e+01]\n",
      "  [-5.01170753e+01]\n",
      "  [-1.66477973e+02]\n",
      "  [-1.77592115e+02]\n",
      "  [ 1.67953732e+02]\n",
      "  [-3.09224920e+01]\n",
      "  [-1.05205759e+02]\n",
      "  [ 3.04864216e+01]\n",
      "  [-3.74409807e+01]\n",
      "  [-7.13584650e+01]\n",
      "  [-1.48231157e+02]\n",
      "  [ 1.67953732e+02]\n",
      "  [-3.09224919e+01]\n",
      "  [-1.53097862e+02]\n",
      "  [-1.23582012e+02]\n",
      "  [-1.03490865e+02]\n",
      "  [-8.08799882e+01]\n",
      "  [-9.40642500e+01]\n",
      "  [ 5.61514785e+01]\n",
      "  [-1.45307228e+02]\n",
      "  [ 2.41064218e+02]\n",
      "  [-1.04032979e+02]\n",
      "  [ 1.83764895e+02]\n",
      "  [-4.67336557e+01]\n",
      "  [ 2.80927022e+02]\n",
      "  [-1.43895782e+02]\n",
      "  [ 2.90322651e+02]\n",
      "  [-1.53291411e+02]\n",
      "  [ 2.75644782e+02]\n",
      "  [-1.38613542e+02]\n",
      "  [ 2.85951189e+02]\n",
      "  [-1.48919949e+02]\n",
      "  [ 2.90189264e+02]\n",
      "  [-1.53158025e+02]\n",
      "  [ 2.90189555e+02]\n",
      "  [-1.53158315e+02]\n",
      "  [-1.26156455e+02]\n",
      "  [-1.27213764e+02]\n",
      "  [ 2.34141066e+02]\n",
      "  [-3.93854949e+02]\n",
      "  [-7.97788219e+01]]\n",
      "\n",
      " [[-2.26689081e+00]\n",
      "  [ 6.83773803e-01]\n",
      "  [-1.75219969e+00]\n",
      "  [ 1.04415922e+00]\n",
      "  [-1.48095655e+00]\n",
      "  [ 1.03651414e+00]\n",
      "  [ 7.28852888e-01]\n",
      "  [ 1.19839919e+00]\n",
      "  [-2.16893180e-02]\n",
      "  [-1.04673657e+00]\n",
      "  [ 3.66439678e-02]\n",
      "  [ 1.01689179e+00]\n",
      "  [-8.27291987e-01]\n",
      "  [ 1.10904243e+00]\n",
      "  [ 1.19168270e+00]\n",
      "  [-2.16893180e-02]\n",
      "  [-1.04673657e+00]\n",
      "  [ 1.19846493e+00]\n",
      "  [ 1.15810737e+00]\n",
      "  [ 9.40938534e-01]\n",
      "  [-9.28764229e-01]\n",
      "  [ 9.34101402e-01]\n",
      "  [ 4.22585818e-01]\n",
      "  [ 1.19846493e+00]\n",
      "  [-7.64915270e-01]\n",
      "  [-3.03510617e-01]\n",
      "  [-3.52123716e-01]\n",
      "  [-7.16302171e-01]\n",
      "  [-2.26689081e+00]\n",
      "  [ 1.19846492e+00]\n",
      "  [-2.26689081e+00]\n",
      "  [ 1.19846493e+00]\n",
      "  [-2.26675639e+00]\n",
      "  [ 1.19833051e+00]\n",
      "  [-2.22653676e+00]\n",
      "  [ 1.15811087e+00]\n",
      "  [-2.26689081e+00]\n",
      "  [ 1.19846493e+00]\n",
      "  [-2.20924217e+00]\n",
      "  [ 1.14081628e+00]\n",
      "  [ 1.19841891e+00]\n",
      "  [ 1.19839540e+00]\n",
      "  [-2.26677528e+00]\n",
      "  [ 1.60954589e+00]\n",
      "  [ 2.28938203e+00]]]\n",
      "Reward from all bandit: [-1.39315230e-01  2.68757697e-02 -1.51667646e-01  4.51252026e+02\n",
      " -1.32022406e-01]\n",
      "===============================================\n",
      "CPU times: user 18.4 s, sys: 654 ms, total: 19 s\n",
      "Wall time: 30.4 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_prucb_int_only = Experiment.run(env, type_ = 'lin_prucb', alpha=0.1, beta =0.3, etha=0.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "id": "a806be20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_ucb\n",
      "Total reward: 451.47369235617384\n",
      "Total regret: 868.1244401340375\n",
      "Accuracy: 0.24579999999999969\n",
      "True success probabilities: [[ 0.          0.0214787  -0.0214787   0.02043647  0.04677647  0.06111707\n",
      "  -0.03521943 -0.09311058 -0.01965845  0.01965845  0.08413963 -0.09228417\n",
      "   0.00844728 -0.13708259  0.13677985 -0.01965845  0.01965845  0.05088425\n",
      "   0.03468717  0.03799021  0.0380494   0.03675668 -0.10845455 -0.08991316\n",
      "  -0.0883091   0.0883091  -0.02267527  0.02267527 -0.02578883  0.02578883\n",
      "  -0.01502827  0.01502827 -0.01947355  0.01947355 -0.0368061   0.0368061\n",
      "  -0.03835769  0.03835769 -0.02688454  0.02688454 -0.02719502 -0.03787797\n",
      "   0.065073    0.05506234 -0.01584778]\n",
      " [ 0.          0.00092489 -0.00092489  0.0068113   0.02554304  0.01828015\n",
      "   0.00325503 -0.05388952 -0.13320743  0.13320743  0.01653047 -0.00399311\n",
      "   0.00567398 -0.00809166 -0.01011969 -0.13320743  0.13320743  0.10847543\n",
      "   0.07525326  0.08749471  0.08343874  0.0804589  -0.22531202 -0.20980902\n",
      "  -0.03432036  0.03432036 -0.01016446  0.01016446 -0.01184634  0.01184634\n",
      "  -0.02526314  0.02526314 -0.00955176  0.00955176 -0.01616977  0.01616977\n",
      "  -0.01631712  0.01631712 -0.02052116  0.02052116 -0.02329785 -0.00214707\n",
      "   0.02544491  0.0324454  -0.01100256]\n",
      " [ 0.         -0.01611895  0.01611895  0.0106157   0.02952097  0.00616863\n",
      "  -0.01340718 -0.03289812 -0.00037286  0.00037286 -0.00344052  0.00136091\n",
      "  -0.00209529 -0.00428038  0.00845528 -0.00037286  0.00037286 -0.11953989\n",
      "  -0.10246818 -0.10370057 -0.10480895 -0.10481167  0.27589986  0.25942941\n",
      "   0.02863119 -0.02863119  0.00572771 -0.00572771  0.01342108 -0.01342108\n",
      "   0.00599104 -0.00599104  0.01142167 -0.01142167  0.01879453 -0.01879453\n",
      "   0.01106327 -0.01106327  0.02407444 -0.02407444  0.01535715  0.00428531\n",
      "  -0.01964246 -0.03259644  0.01082458]\n",
      " [ 0.         -0.00445243  0.00445243  0.09648407  0.12261561  0.00707698\n",
      "  -0.07950941 -0.14666726  0.021372   -0.021372   -0.02532282  0.02354909\n",
      "  -0.00706154  0.02463538 -0.01580011  0.021372   -0.021372   -0.05778487\n",
      "  -0.0486947  -0.05319642 -0.05278787 -0.05164309  0.12364155  0.1404654\n",
      "   0.06413112 -0.06413112  0.01953283 -0.01953283  0.01575739 -0.01575739\n",
      "   0.01634815 -0.01634815  0.01926954 -0.01926954  0.02578164 -0.02578164\n",
      "   0.02516443 -0.02516443  0.03099881 -0.03099881  0.03608827  0.01148992\n",
      "  -0.04757819 -0.0448667   0.00853803]\n",
      " [ 0.          0.00213726 -0.00213726  0.07101908  0.06822769 -0.01323037\n",
      "  -0.05593196 -0.07008445  0.08785198 -0.08785198 -0.00776193  0.01817619\n",
      "   0.02613427 -0.01179205 -0.02475647  0.08785198 -0.08785198 -0.00111929\n",
      "  -0.02710077 -0.02467453 -0.0267703  -0.02950755  0.04163742  0.06753502\n",
      "  -0.05933364  0.05933364 -0.00828722  0.00828722 -0.01791943  0.01791943\n",
      "  -0.00729617  0.00729617 -0.00995196  0.00995196 -0.0277496   0.0277496\n",
      "  -0.02577904  0.02577904 -0.02187505  0.02187505 -0.02181492 -0.01615404\n",
      "   0.03796896  0.03339225 -0.00743852]]\n",
      "Bandits pull count: [   2    1    1 4993    3]\n",
      "Estimates of success probability: [[[ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [ 0.02017934]\n",
      "  [-0.01496365]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01496365]\n",
      "  [ 0.02017934]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [-0.01496365]\n",
      "  [ 0.02017934]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [-0.01708868]\n",
      "  [-0.01496365]\n",
      "  [ 0.02017934]\n",
      "  [-0.01496365]\n",
      "  [ 0.02017934]\n",
      "  [-0.01708868]\n",
      "  [-0.01708868]\n",
      "  [ 0.02230437]\n",
      "  [ 0.15391366]\n",
      "  [-0.04907245]]\n",
      "\n",
      " [[-0.02831048]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [ 0.01785516]\n",
      "  [-0.02831048]\n",
      "  [-0.04752819]\n",
      "  [ 0.017415  ]]\n",
      "\n",
      " [[ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [-0.01614964]\n",
      "  [ 0.03128077]\n",
      "  [-0.04614809]\n",
      "  [-0.01731938]]\n",
      "\n",
      " [[ 0.04474589]\n",
      "  [ 0.00897914]\n",
      "  [ 0.01189546]\n",
      "  [ 0.00204486]\n",
      "  [ 0.00731564]\n",
      "  [-0.00757745]\n",
      "  [-0.02540968]\n",
      "  [-0.02711266]\n",
      "  [ 0.02540863]\n",
      "  [-0.00453403]\n",
      "  [-0.01607142]\n",
      "  [ 0.00462891]\n",
      "  [-0.00570438]\n",
      "  [-0.01094114]\n",
      "  [-0.02265125]\n",
      "  [ 0.02540863]\n",
      "  [-0.00453403]\n",
      "  [-0.02339074]\n",
      "  [-0.0189058 ]\n",
      "  [-0.015729  ]\n",
      "  [-0.01240156]\n",
      "  [-0.01426502]\n",
      "  [ 0.0084172 ]\n",
      "  [-0.02220695]\n",
      "  [ 0.03671769]\n",
      "  [-0.0158431 ]\n",
      "  [ 0.02781261]\n",
      "  [-0.00693801]\n",
      "  [ 0.04284716]\n",
      "  [-0.02197257]\n",
      "  [ 0.04418838]\n",
      "  [-0.02331379]\n",
      "  [ 0.04203475]\n",
      "  [-0.02116015]\n",
      "  [ 0.04352414]\n",
      "  [-0.02264954]\n",
      "  [ 0.04412253]\n",
      "  [-0.02324794]\n",
      "  [ 0.04412257]\n",
      "  [-0.02324798]\n",
      "  [-0.019325  ]\n",
      "  [-0.01945764]\n",
      "  [ 0.03578595]\n",
      "  [-0.05893264]\n",
      "  [-0.01247638]]\n",
      "\n",
      " [[-0.00272694]\n",
      "  [ 0.00569966]\n",
      "  [-0.00272694]\n",
      "  [ 0.05657312]\n",
      "  [ 0.00569966]\n",
      "  [-0.0536004 ]\n",
      "  [ 0.00569966]\n",
      "  [ 0.00569966]\n",
      "  [ 0.05657312]\n",
      "  [-0.0536004 ]\n",
      "  [-0.04028471]\n",
      "  [ 0.05657312]\n",
      "  [-0.00761603]\n",
      "  [ 0.00569966]\n",
      "  [ 0.00569966]\n",
      "  [ 0.05657312]\n",
      "  [-0.0536004 ]\n",
      "  [ 0.00569966]\n",
      "  [ 0.00569966]\n",
      "  [ 0.05657312]\n",
      "  [-0.04028471]\n",
      "  [-0.00761603]\n",
      "  [ 0.00569966]\n",
      "  [ 0.00569966]\n",
      "  [ 0.00569966]\n",
      "  [-0.00272694]\n",
      "  [ 0.01058875]\n",
      "  [-0.00761603]\n",
      "  [-0.00272694]\n",
      "  [ 0.00569966]\n",
      "  [ 0.01058875]\n",
      "  [-0.00761603]\n",
      "  [ 0.04325743]\n",
      "  [-0.04028471]\n",
      "  [ 0.01058875]\n",
      "  [-0.00761603]\n",
      "  [-0.00272694]\n",
      "  [ 0.00569966]\n",
      "  [-0.00272694]\n",
      "  [ 0.00569966]\n",
      "  [ 0.05657312]\n",
      "  [ 0.00569966]\n",
      "  [-0.0536004 ]\n",
      "  [-0.04418924]\n",
      "  [-0.06615592]]]\n",
      "Reward from all bandit: [ 2.41459127e-01 -4.93881838e-01  5.17537151e-04  4.51761524e+02\n",
      " -3.59260549e-02]\n",
      "===============================================\n",
      "CPU times: user 10.2 s, sys: 297 ms, total: 10.5 s\n",
      "Wall time: 12 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_ucb_int_only = Experiment.run(env, type_ = 'lin_ucb', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "id": "8b352c44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: ucb1\n",
      "Total reward: 260.9615680045703\n",
      "Total regret: 1058.6365644856412\n",
      "Accuracy: 0.23258606885508457\n",
      "Bandits pull count: [ 250  535 1100 2843  272]\n",
      "Reward from all bandit: [-23.04491899  -5.02090478  49.3410378  261.97752434 -22.29117036]\n",
      "Reward estimate all bandit: [-0.09181243 -0.00936736  0.04481475  0.09211587 -0.08165264]\n",
      "===============================================\n",
      "CPU times: user 276 ms, sys: 6.4 ms, total: 282 ms\n",
      "Wall time: 482 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_ucb_int_only = Experiment.run(env, type_ = 'ucb1', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "id": "dfa951eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: random\n",
      "Total reward: -81.65905247788473\n",
      "Total regret: 1401.2571849680946\n",
      "Accuracy: 0.1955608878224358\n",
      "Bandits pull count: [1005  938 1018 1006 1033]\n",
      "Reward from all bandit: [ -89.47448661  -22.09803909   43.32624192  101.2784858  -114.6912545 ]\n",
      "Reward estimate all bandit: [-0.08894084 -0.02353359  0.04251839  0.10057446 -0.11091998]\n",
      "===============================================\n",
      "CPU times: user 145 ms, sys: 5.44 ms, total: 151 ms\n",
      "Wall time: 250 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_random_int_only = Experiment.run(env, type_ = 'random', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e4feaae",
   "metadata": {},
   "source": [
    "## без полиномов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "id": "d91e47d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums_to_test = 5000\n",
    "BANDITS = [LinUCB, RandomBandit, UCB1_Bandit, LinPRUCB]\n",
    "env = ContextLinEnvironment(nums_to_test, BANDITS, n_action=5, n_dims = 44, context = df_transformed[nums_to_choose_hyperparam:nums_to_choose_hyperparam+nums_to_test], thetas = estimated_weights_wo_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "id": "437aa648",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_prucb\n",
      "Total reward: 2923.9258970461533\n",
      "Total regret: 1128.5731017909861\n",
      "Accuracy: 0.5293999999999983\n",
      "True success probabilities: [[ 4.55242743e-02  4.37579551e-02  2.46702764e-02  3.90255040e-02\n",
      "   3.45043757e-02  1.63780129e-02 -2.52959397e-02 -8.89687660e-02\n",
      "   1.78250995e-01  3.66399617e-02  2.06402379e-02  2.48920402e-02\n",
      "   8.26153019e-03 -1.15154066e-03 -8.89687660e-02  1.78250995e-01\n",
      "   9.31904098e-02  9.21304219e-02  9.78192564e-02  9.72216617e-02\n",
      "   9.66039212e-02 -2.00840270e-01 -1.86843172e-01  7.98945822e-03\n",
      "   8.12927711e-02  3.50093565e-02  5.42728729e-02  2.95906381e-02\n",
      "   5.96915912e-02  4.13874664e-02  4.78947629e-02  3.66056849e-02\n",
      "   5.26765444e-02  2.59941788e-02  6.32880505e-02  3.04694712e-02\n",
      "   5.88127581e-02  3.05011658e-02  5.87810635e-02  1.83273630e-02\n",
      "   1.86484870e-02  5.23063794e-02  3.33780481e-02 -1.19576700e-02]\n",
      " [ 6.08650719e-02  4.72845663e-02  9.32366460e-02  9.39155118e-02\n",
      "   9.20657650e-03 -3.69561323e-02 -5.12529638e-02  1.43281123e-01\n",
      "  -3.51314847e-02  1.49457705e-02  3.70829410e-02  4.65057743e-02\n",
      "   9.95899659e-03 -3.43844220e-04  1.43281123e-01 -3.51314847e-02\n",
      "   1.03306995e-02 -4.65370964e-03 -5.46240971e-03 -7.93187705e-03\n",
      "  -9.56276071e-03  6.58331612e-02  5.95965346e-02 -7.31276891e-03\n",
      "   1.15462407e-01  4.37711622e-02  6.43784760e-02  3.66824335e-02\n",
      "   7.14672048e-02  4.39548598e-02  6.41947784e-02  4.84412115e-02\n",
      "   5.97084267e-02  2.73995405e-02  8.07500977e-02  3.44530930e-02\n",
      "   7.36965452e-02  2.58512609e-02  8.22983774e-02  8.93123417e-03\n",
      "   2.58526674e-02  7.33657367e-02  3.53860966e-02 -9.14652161e-03]\n",
      " [-7.86801798e-03  1.96321967e-02  7.73174259e-03  2.78256663e-02\n",
      "   9.64350738e-03 -1.02141037e-02 -2.32226338e-02  6.44068499e-03\n",
      "   5.32349377e-03  1.48380434e-04  4.99116152e-05  3.81098755e-03\n",
      "  -2.10792560e-03  9.86282476e-03  6.44068499e-03  5.32349377e-03\n",
      "  -1.06124980e-01 -1.06099803e-01 -1.01344955e-01 -1.02522502e-01\n",
      "  -1.01778238e-01  2.66325459e-01  2.63309198e-01  3.28417228e-02\n",
      "  -2.10775440e-02  1.52452257e-02 -3.48104693e-03  1.07692853e-02\n",
      "   9.94893501e-04  1.30846925e-02 -1.32051377e-03  1.25985431e-02\n",
      "  -8.34364307e-04  2.73956004e-02 -1.56314217e-02  2.10460941e-02\n",
      "  -9.28191535e-03  2.38161611e-02 -1.20519824e-02  1.94681459e-02\n",
      "   5.70258710e-03 -1.34065543e-02 -3.24761350e-02  9.10249195e-03]\n",
      " [ 0.00000000e+00  8.91789802e-03  8.96328970e-02  1.20922312e-01\n",
      "   3.11909473e-03 -7.13009668e-02 -1.50900246e-01  2.70085603e-02\n",
      "  -1.31173453e-02 -2.28872209e-02  3.37442999e-02  0.00000000e+00\n",
      "   4.20112275e-02 -2.09593082e-02  2.70085603e-02 -1.31173453e-02\n",
      "  -6.55044990e-02 -3.79344952e-02 -3.79658894e-02 -3.43312251e-02\n",
      "  -3.22203240e-02  1.40868044e-01  1.46890408e-01  7.06381182e-02\n",
      "  -5.67576042e-02  2.36259545e-02 -9.66166978e-03  2.43922363e-02\n",
      "  -1.04876001e-02  2.48076286e-02 -1.09213552e-02  2.91600900e-02\n",
      "  -1.52446083e-02  3.26891768e-02 -1.88061604e-02  2.68304942e-02\n",
      "  -1.29381625e-02  3.84058837e-02 -2.45253639e-02  2.51290449e-02\n",
      "   1.39689003e-02 -4.72219974e-02 -4.47766566e-02  1.19567718e-02]\n",
      " [ 6.78810095e-02  2.34440718e-02  3.69626002e-02  7.05998018e-02\n",
      "   7.85991529e-02 -1.94259163e-02 -7.54105574e-02  2.45663846e-02\n",
      "   6.67586966e-02  9.43185825e-02 -7.66392174e-02  2.70848829e-02\n",
      "  -1.15089896e-01  1.61650729e-01  2.45663846e-02  6.67586966e-02\n",
      "   7.39342129e-02  4.57260521e-02  5.95432014e-02  5.79621825e-02\n",
      "   5.10346130e-02 -9.73745161e-02 -9.95006645e-02 -4.08477082e-02\n",
      "   1.32172789e-01  2.50594332e-02  6.62656480e-02  1.84716781e-02\n",
      "   7.28534031e-02  4.33930807e-02  4.79320006e-02  2.48423599e-02\n",
      "   6.64827214e-02  4.20027624e-03  8.71248050e-02  1.81704445e-02\n",
      "   7.31546368e-02  7.28006220e-03  8.40450191e-02  2.14974959e-03\n",
      "   6.82331943e-03  8.23520123e-02  5.64934648e-02 -1.49728614e-02]]\n",
      "Bandits pull count: [5000    0    0    0    0]\n",
      "Estimates of success probability: [[[  440.97026196]\n",
      "  [  481.69671669]\n",
      "  [ -467.99199324]\n",
      "  [ -426.56891922]\n",
      "  [  -26.45117688]\n",
      "  [ -361.15472408]\n",
      "  [ -797.05458564]\n",
      "  [ -399.56206583]\n",
      "  [ 1322.22904452]\n",
      "  [ -102.45607746]\n",
      "  [ -425.10879544]\n",
      "  [   83.58964083]\n",
      "  [ -834.13296525]\n",
      "  [ -801.11320141]\n",
      "  [ -399.56206582]\n",
      "  [ 1322.22904452]\n",
      "  [ -979.5166448 ]\n",
      "  [ -649.28231761]\n",
      "  [ -401.213419  ]\n",
      "  [ -197.36123732]\n",
      "  [ -203.68703154]\n",
      "  [ -664.50193498]\n",
      "  [ -984.91773219]\n",
      "  [  582.76371654]\n",
      "  [  339.90326225]\n",
      "  [  960.84522188]\n",
      "  [  -38.17824293]\n",
      "  [ 1856.62922197]\n",
      "  [ -933.96224303]\n",
      "  [ 1897.85452657]\n",
      "  [ -975.18754763]\n",
      "  [ 1708.02811157]\n",
      "  [ -785.36113263]\n",
      "  [ 1786.63435463]\n",
      "  [ -863.96737569]\n",
      "  [ 1873.03706323]\n",
      "  [ -950.37008429]\n",
      "  [ 1875.24433564]\n",
      "  [ -952.5773567 ]\n",
      "  [ -893.60766331]\n",
      "  [ -902.42646109]\n",
      "  [ 1718.07164389]\n",
      "  [ -826.76228176]\n",
      "  [-1005.67711112]]\n",
      "\n",
      " [[    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]]\n",
      "\n",
      " [[    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]]\n",
      "\n",
      " [[    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]]\n",
      "\n",
      " [[    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]\n",
      "  [    0.        ]]]\n",
      "Reward from all bandit: [2923.92589705    0.            0.            0.            0.        ]\n",
      "===============================================\n",
      "CPU times: user 10.1 s, sys: 84.8 ms, total: 10.2 s\n",
      "Wall time: 5.81 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_prucb = Experiment.run(env, type_ = 'lin_prucb', alpha=0.1, beta =0.3, etha=0.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "9cfa9e33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: lin_ucb\n",
      "Total reward: 2923.9258970461533\n",
      "Total regret: 1128.5731017909861\n",
      "Accuracy: 0.5293999999999983\n",
      "True success probabilities: [[ 4.55242743e-02  4.37579551e-02  2.46702764e-02  3.90255040e-02\n",
      "   3.45043757e-02  1.63780129e-02 -2.52959397e-02 -8.89687660e-02\n",
      "   1.78250995e-01  3.66399617e-02  2.06402379e-02  2.48920402e-02\n",
      "   8.26153019e-03 -1.15154066e-03 -8.89687660e-02  1.78250995e-01\n",
      "   9.31904098e-02  9.21304219e-02  9.78192564e-02  9.72216617e-02\n",
      "   9.66039212e-02 -2.00840270e-01 -1.86843172e-01  7.98945822e-03\n",
      "   8.12927711e-02  3.50093565e-02  5.42728729e-02  2.95906381e-02\n",
      "   5.96915912e-02  4.13874664e-02  4.78947629e-02  3.66056849e-02\n",
      "   5.26765444e-02  2.59941788e-02  6.32880505e-02  3.04694712e-02\n",
      "   5.88127581e-02  3.05011658e-02  5.87810635e-02  1.83273630e-02\n",
      "   1.86484870e-02  5.23063794e-02  3.33780481e-02 -1.19576700e-02]\n",
      " [ 6.08650719e-02  4.72845663e-02  9.32366460e-02  9.39155118e-02\n",
      "   9.20657650e-03 -3.69561323e-02 -5.12529638e-02  1.43281123e-01\n",
      "  -3.51314847e-02  1.49457705e-02  3.70829410e-02  4.65057743e-02\n",
      "   9.95899659e-03 -3.43844220e-04  1.43281123e-01 -3.51314847e-02\n",
      "   1.03306995e-02 -4.65370964e-03 -5.46240971e-03 -7.93187705e-03\n",
      "  -9.56276071e-03  6.58331612e-02  5.95965346e-02 -7.31276891e-03\n",
      "   1.15462407e-01  4.37711622e-02  6.43784760e-02  3.66824335e-02\n",
      "   7.14672048e-02  4.39548598e-02  6.41947784e-02  4.84412115e-02\n",
      "   5.97084267e-02  2.73995405e-02  8.07500977e-02  3.44530930e-02\n",
      "   7.36965452e-02  2.58512609e-02  8.22983774e-02  8.93123417e-03\n",
      "   2.58526674e-02  7.33657367e-02  3.53860966e-02 -9.14652161e-03]\n",
      " [-7.86801798e-03  1.96321967e-02  7.73174259e-03  2.78256663e-02\n",
      "   9.64350738e-03 -1.02141037e-02 -2.32226338e-02  6.44068499e-03\n",
      "   5.32349377e-03  1.48380434e-04  4.99116152e-05  3.81098755e-03\n",
      "  -2.10792560e-03  9.86282476e-03  6.44068499e-03  5.32349377e-03\n",
      "  -1.06124980e-01 -1.06099803e-01 -1.01344955e-01 -1.02522502e-01\n",
      "  -1.01778238e-01  2.66325459e-01  2.63309198e-01  3.28417228e-02\n",
      "  -2.10775440e-02  1.52452257e-02 -3.48104693e-03  1.07692853e-02\n",
      "   9.94893501e-04  1.30846925e-02 -1.32051377e-03  1.25985431e-02\n",
      "  -8.34364307e-04  2.73956004e-02 -1.56314217e-02  2.10460941e-02\n",
      "  -9.28191535e-03  2.38161611e-02 -1.20519824e-02  1.94681459e-02\n",
      "   5.70258710e-03 -1.34065543e-02 -3.24761350e-02  9.10249195e-03]\n",
      " [ 0.00000000e+00  8.91789802e-03  8.96328970e-02  1.20922312e-01\n",
      "   3.11909473e-03 -7.13009668e-02 -1.50900246e-01  2.70085603e-02\n",
      "  -1.31173453e-02 -2.28872209e-02  3.37442999e-02  0.00000000e+00\n",
      "   4.20112275e-02 -2.09593082e-02  2.70085603e-02 -1.31173453e-02\n",
      "  -6.55044990e-02 -3.79344952e-02 -3.79658894e-02 -3.43312251e-02\n",
      "  -3.22203240e-02  1.40868044e-01  1.46890408e-01  7.06381182e-02\n",
      "  -5.67576042e-02  2.36259545e-02 -9.66166978e-03  2.43922363e-02\n",
      "  -1.04876001e-02  2.48076286e-02 -1.09213552e-02  2.91600900e-02\n",
      "  -1.52446083e-02  3.26891768e-02 -1.88061604e-02  2.68304942e-02\n",
      "  -1.29381625e-02  3.84058837e-02 -2.45253639e-02  2.51290449e-02\n",
      "   1.39689003e-02 -4.72219974e-02 -4.47766566e-02  1.19567718e-02]\n",
      " [ 6.78810095e-02  2.34440718e-02  3.69626002e-02  7.05998018e-02\n",
      "   7.85991529e-02 -1.94259163e-02 -7.54105574e-02  2.45663846e-02\n",
      "   6.67586966e-02  9.43185825e-02 -7.66392174e-02  2.70848829e-02\n",
      "  -1.15089896e-01  1.61650729e-01  2.45663846e-02  6.67586966e-02\n",
      "   7.39342129e-02  4.57260521e-02  5.95432014e-02  5.79621825e-02\n",
      "   5.10346130e-02 -9.73745161e-02 -9.95006645e-02 -4.08477082e-02\n",
      "   1.32172789e-01  2.50594332e-02  6.62656480e-02  1.84716781e-02\n",
      "   7.28534031e-02  4.33930807e-02  4.79320006e-02  2.48423599e-02\n",
      "   6.64827214e-02  4.20027624e-03  8.71248050e-02  1.81704445e-02\n",
      "   7.31546368e-02  7.28006220e-03  8.40450191e-02  2.14974959e-03\n",
      "   6.82331943e-03  8.23520123e-02  5.64934648e-02 -1.49728614e-02]]\n",
      "Bandits pull count: [5000    0    0    0    0]\n",
      "Estimates of success probability: [[[ 0.01209413]\n",
      "  [ 0.01318652]\n",
      "  [-0.01281881]\n",
      "  [-0.01170733]\n",
      "  [-0.00071701]\n",
      "  [-0.0098906 ]\n",
      "  [-0.0218378 ]\n",
      "  [-0.01094328]\n",
      "  [ 0.03622393]\n",
      "  [-0.00280016]\n",
      "  [-0.01164346]\n",
      "  [ 0.00227516]\n",
      "  [-0.02285405]\n",
      "  [-0.02194904]\n",
      "  [-0.01094328]\n",
      "  [ 0.03622393]\n",
      "  [-0.02683874]\n",
      "  [-0.01778764]\n",
      "  [-0.01098854]\n",
      "  [-0.00542518]\n",
      "  [-0.00557471]\n",
      "  [-0.01820478]\n",
      "  [-0.02698677]\n",
      "  [ 0.01598042]\n",
      "  [ 0.00930023]\n",
      "  [ 0.02631908]\n",
      "  [-0.00103843]\n",
      "  [ 0.05087083]\n",
      "  [-0.02559018]\n",
      "  [ 0.05200074]\n",
      "  [-0.02672009]\n",
      "  [ 0.04679796]\n",
      "  [-0.0215173 ]\n",
      "  [ 0.04895241]\n",
      "  [-0.02367175]\n",
      "  [ 0.05132054]\n",
      "  [-0.02603989]\n",
      "  [ 0.05138104]\n",
      "  [-0.02610038]\n",
      "  [-0.02448414]\n",
      "  [-0.02472584]\n",
      "  [ 0.04707323]\n",
      "  [-0.02263408]\n",
      "  [-0.0275666 ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]\n",
      "\n",
      " [[ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]\n",
      "  [ 0.        ]]]\n",
      "Reward from all bandit: [2923.92589705    0.            0.            0.            0.        ]\n",
      "===============================================\n",
      "CPU times: user 7.13 s, sys: 101 ms, total: 7.23 s\n",
      "Wall time: 4.53 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_lin_ucb = Experiment.run(env, type_ = 'lin_ucb', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "2ce76178",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: ucb1\n",
      "Total reward: 2855.4016763208397\n",
      "Total regret: 1197.0973225162945\n",
      "Accuracy: 0.442153722978382\n",
      "Bandits pull count: [2139 2316   58   65  422]\n",
      "Reward from all bandit: [1260.9413363  1373.45275385    8.03434972   10.97426584  201.99897061]\n",
      "Reward estimate all bandit: [0.58922492 0.59277201 0.13617542 0.16627676 0.47753894]\n",
      "===============================================\n",
      "CPU times: user 293 ms, sys: 5.51 ms, total: 298 ms\n",
      "Wall time: 320 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_ucb = Experiment.run(env, type_ = 'ucb1', alpha=0.1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "7a8ddabb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================== STATS ====================\n",
      "Type of the bandit: random\n",
      "Total reward: 1941.9225495848511\n",
      "Total regret: 2112.6095683606973\n",
      "Accuracy: 0.20235952809438137\n",
      "Bandits pull count: [1009 1026 1023  980  962]\n",
      "Reward from all bandit: [592.08394244 599.95104226 108.33569686 183.16342924 458.3884388 ]\n",
      "Reward estimate all bandit: [0.58622173 0.58417823 0.10579658 0.18671094 0.47600046]\n",
      "===============================================\n",
      "CPU times: user 133 ms, sys: 5.92 ms, total: 139 ms\n",
      "Wall time: 142 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "exp_random = Experiment.run(env, type_ = 'random', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89aff725",
   "metadata": {},
   "source": [
    "# Графики результатов"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2d892ed",
   "metadata": {},
   "source": [
    "### C полиномами"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "id": "3fb176f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_with_polinomial.mean_reward, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_with_polinomial.mean_reward, label=\"$linucb$\")\n",
    "plt.plot(exp_random_with_polinomial.mean_reward, label=\"$random$\")\n",
    "plt.plot(exp_ucb_with_polinomial.mean_reward, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Среднее значение наград для различных алгоритмов\")\n",
    "plt.ylabel(\"Средняя награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "id": "33f6c825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_with_polinomial.mean_regret, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_with_polinomial.mean_regret, label=\"$linucb$\")\n",
    "plt.plot(exp_random_with_polinomial.mean_regret, label=\"$random$\")\n",
    "plt.plot(exp_ucb_with_polinomial.mean_regret, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Среднее значение потерь для различных алгоритмов\")\n",
    "plt.ylabel(\"Средние потери\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "id": "2e073af5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(np.cumsum(exp_lin_prucb_with_polinomial.cumulative_reward), label=\"$lin_prucb$\")\n",
    "plt.plot(np.cumsum(exp_lin_ucb_with_polinomial.cumulative_reward), label=\"$linucb$\")\n",
    "plt.plot(np.cumsum(exp_random_with_polinomial.cumulative_reward), label=\"$random$\")\n",
    "plt.plot(np.cumsum(exp_ucb_with_polinomial.cumulative_reward), label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Накопленное значение награды\")\n",
    "plt.ylabel(\"Награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "id": "9b8200db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_with_polinomial.accuracy, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_with_polinomial.accuracy, label=\"$linucb$\")\n",
    "plt.plot(exp_random_with_polinomial.accuracy, label=\"$random$\")\n",
    "plt.plot(exp_ucb_with_polinomial.accuracy, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.ylabel(\"Точность\")\n",
    "plt.title(\"Точность работы алгоритмов\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5e68f76",
   "metadata": {},
   "source": [
    "## Только со взаимодействиями"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "id": "33894232",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_int_only.mean_reward, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_int_only.mean_reward, label=\"$linucb$\")\n",
    "plt.plot(exp_random_int_only.mean_reward, label=\"$random$\")\n",
    "plt.plot(exp_ucb_int_only.mean_reward, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Среднее значение наград для различных алгоритмов\")\n",
    "plt.ylabel(\"Средняя награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "id": "339c7e44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAAHwCAYAAABDrzX1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAACJiUlEQVR4nOzdd5hcZf3+8fcpU3e2l/QE0gMhFOlNqUFI6CjlB1IEaaIofAUF6UpTmoKCICCooFIMIjUoGhApKpDeSM/2PvWU3x+zO8mySTa7ZAvZ+3VdkJ2ZM+d8Zp7ZZO7zlGP4vu8jIiIiIiIi3WL2dwEiIiIiIiKfRwpTIiIiIiIiPaAwJSIiIiIi0gMKUyIiIiIiIj2gMCUiIiIiItIDClMiIiIiIiI9YPd3ASKyea7r8vjjjzNr1ixc1yWTyXDIIYfwrW99i2Aw2N/liYiIiAxqhq4zJTJwXXvttTQ2NnLLLbeQn59PPB7niiuuIC8vjzvuuKO/yxMREREZ1BSmRAao1atXM2PGDP75z38Si8Vy91dXV/PBBx8wffp0rrrqKkKhEAsWLKC2tpYDDjiAa665hkAgwNKlS7nllltoaGjAdV3OPPNMTj75ZAC++93vsmDBAmzbprGxkUmTJvHLX/6S++67j/r6en74wx8CdLhdWVnJjTfeyLp168hkMhxzzDFceOGFAHzwwQfceeedJBIJTNPk0ksv5ZBDDun0mn70ox8xe/ZsAI4//nguvfTSLR7zjTfe4Je//CXpdJq6ujqOP/54vv3tb3PooYdyzz33sMsuuwB0uD179mweeOABMpkM4XCY733ve+y+++5bPM7Gz//ggw84/fTTeeyxx9hnn302u79Pt9URRxzBxIkTAYjH44RCIV544QWam5u54YYbWLBgAYZhcNBBB/Gd73yH6667jo8//piVK1dSXFxMfn4+V1xxBRMnTtzk+7x69WrOPPNMDjroIP73v//h+z4//OEP2XPPPTu9ts1xHIe99tqL0aNHA7By5Up+/OMfc9RRR/HMM89wyy23MHLkSAAqKys544wz+OY3v8njjz/Ob37zG8LhMACLFi1i4cKFnd6DzdVXU1PDD3/4Q2pra6murmbEiBHcfffdlJaWbvIz8en3s7m5mREjRvCb3/yGM888kzPOOIOjjjqKVatWMWPGDK677jrWrFmzVe278eeluLiYmTNn8p///KfDa3nnnXe46aabeOGFF7j66quJx+Pcc889LF68mLPOOosnnniCcePGdXjOL37xC15//XWSySSJRILvfe97HHHEEQBMmjSJiRMnYpomyWSSTCbD7Nmzueqqq5gzZw4lJSVYlsVTTz3Frbfeyttvv41lWUybNo2rr76aWCzGoYceyjHHHMOcOXNobm7mnHPO4fTTT+9QK8APf/hD/vnPf/K73/2OCy64gEwmw/Lly5k4cSLBYJA//OEPTJo0iR122IGXX34ZgHXr1nHooYdy3HHHceutt7J+/Xquv/561qxZg+/7HH/88Xz961/v0C6ZTAbDMLj77ruZMGHCFj93IiLbMw3zExmg5s6dy/jx4zsEKYDy8nKmT5+eu/3hhx/yxBNPEAgEOPfcc3nqqac49dRTueyyy7j99tvZeeedaW5u5qtf/Srjx49nt912I5lM8uijj1JeXs4zzzyT+1K1JVdeeSVnn302hx56KKlUivPPP5/Ro0dzwAEHcPXVV/Pwww8zcuRIKisr+cpXvsKkSZMYPnx47vkNDQ2Ul5fz4osvUllZyVFHHcU3vvGNzR7P930eeeQRbr31VnbYYQcqKys55JBDOOuss7AsC8/zOj3nk08+4a677uLxxx+nuLiYxYsXc8455/DKK69szVtOJpPhpptuorCwsMv9RaPRDs8Nh8M8//zzwIYv4wA333wzRUVFzJo1i0wmw0UXXcQjjzzCLbfcAtAhHACcddZZm3yfp02bxtq1a9lrr7248cYb+fvf/863v/1t3njjja16bQCJRII99tiDhx9+OHfsje2555788pe/BODGG28EoKWlhdtuu42///3vlJWVUVdXx3777bfJ/W+uvr/85S/stttuXHDBBfi+zwUXXMDzzz/PiSeeuNnPxMbv50svvcSTTz7Z6XjXX3997vfDsixc193q92JrXXvttZxwwgk8++yzPPzww1x99dWdgtSaNWt46623coHzL3/5C/fee28uTAE89thjlJSU8NFHH/Gtb30rd//ZZ5/NeeedB8C9995LVVUVzz//PJZl8YMf/IDbb7891xaNjY386U9/orKykuOPP54vfOELHep47733mD17NsFgkCFDhvD888+zevVqZs6cmXsv20UiEebPn8+UKVN47rnnOvyuXnHFFRx22GGcc845NDc3c8YZZzBs2DB23XXXDu1y33338atf/YrbbrttG7zTIiKfTwpTIgOUaZqbDAyfdsIJJ5CXlwfAcccdx+uvv86+++7LypUr+f73v5/bLplMMm/ePHbbbTfWr19PQUHBJvf34osv8v777wNQU1PD9OnTicfjvPvuuzQ2NnLPPfcA2d6XBQsWkJeXR3V1NZdcckluH4ZhsHDhwg5f0IqKijj//PO5//77eeSRRzjqqKMIBAKbPaZhGPziF7/gb3/7Gy+88AJLly7F930SiQRjx45l9uzZ7LLLLrS2tpJOpwGYM2cOVVVVnH322R1qWbly5WaPs7GHHnqIL33pS7z66qtd7m/y5Mldtg3Am2++ye9+9zsMwyAYDHLqqafy2GOPccEFF3Tadkvv87Rp0ygsLGTmzJkAfPGLX8SyrFwPUftrMwyDPffckyuvvJJQKNRh/2vXrs0Fxa0VCAQIhUJUVVVRVla2xW03V9/XvvY13nvvPX7961/zySefsHjxYnbdddctfia68vzzz1NaWsrUqVMBGDt2LC+88AKNjY3k5+fT0NDQYfsrrrgi17NWVVWVuz+ZTHLccccBUFFRweWXX97hedFolLvuuouvfOUrHHvssRx77LGdahkxYgS33347s2bNYsWKFfzvf/+jtbV1q17Hxt58800uv/zy3Htw5plndvi9Ov300zEMg6FDh3LQQQcxZ84cdt55ZwDS6TQ333wzV1xxBffee2+Xxzr66KP561//ypQpU3jxxRc55phjqKqqIh6P88EHH/DII48AkJ+fz4knnsibb77Jrrvu2mEfNTU15Ofnd/t1iohsTxSmRAaoadOmsWzZMlpaWjr0TlVWVnLttdfmvjBZlpV7zPd9TNPEdV3y8/M7nI1u/+KTSqVIJBKdvmi3O/roozsNlfI8D9/3+f3vf08kEgGgrq6OUCjEO++8w7hx4/jDH/7QocaSkpIO+/V9n+bmZi6++GLOOOMMjj76aBYtWrTZY8bjcU444QQOP/xw9txzT0466SRee+01fN/n6quv5rrrrmPGjBmUlJTkvrh6nsd+++3H3XffnTvuunXrqKio4NVXX93kcdqtWLGCl19+mT/84Q+5MLWl/W0tz/MwDKPDbcdxNrvt5t7n+vr6Dm3dvn37fe2vLZPJ8J3vfIeHH36Yiy++uMP28+fPZ8cdd9xsrRvX2S4UCnHvvffyne98h6ampk7turHN1XfHHXfw4YcfctJJJ7HPPvvgOA6+72/2M/HpXr9Pa2ho4PHHH+eJJ57g6quvBuCII47gP//5D1/5ylfIz8+ntbW1Qw/anXfe2WGYX7uNe1peeeUVvvWtb3HzzTd3ON7y5cspKipi/vz5pNPpTou/zJ07l4svvpizzz6bAw44gL322osbbrihwzabem8/bVOflUwmk7tt23aHx0xzw4K8Dz74IIcddlinXrPNOeKII7jkkks45JBD2HHHHSksLKSqqir3Gfx0Xe2f2fbwmUqlWLlyJQ888MBWHU9EZHulpdFFBqghQ4Ywc+ZMvv/979PS0gJkh1xdf/31FBUV5c6y//WvfyWdTpNKpXj22WdzX442/pK4bt06ZsyYwccff8zs2bPZe++9u1VLLBZjt91249e//jUATU1NnHbaabz++uvsttturFixgnfffRfIfmGfPn06lZWVHfbx+uuvc9ZZZ5FKpQiFQgSDQZqamjZ7zBUrVtDS0pKbI/XOO++QTqfxPI8ddtiBxx57jBdffJEnnniC4uJiAPbbbz/mzJnD0qVLAfj73//OscceSzKZ7PI13n777fzgBz/o8EX5s+yv3YEHHsgTTzyB7/uk02mefvpp9t9//01uu6X3GbLB6s033wRg9uzZBAKB3LyidoFAgFgstskaX3zxRb74xS9u8tiO43T4sr6xeDxOOp3mT3/6E48//vhmX+vm6vvnP//J1772NY4//nhKS0t56623cF13s58Jx3G22EP185//nAsuuKBDsLMsi6uvvpqXX36ZP/7xjxx99NGbff7mFBUVkUgkOty3evVqbrnlFh555BHGjh3LnXfe2el57777LlOnTuWcc85h77335vXXX88NOWwPQ1vT43bQQQfxu9/9jkwmg+d5PPnkkxxwwAG5x5977jkg28M4Z84cDj74YCA7j/LVV1/d4rDZTyssLGTEiBHcdtttnHDCCbn7Y7EYu+66a25YZXNzM88991zuM9v+98pLL73Eww8/3OU8PRGR7Z16pkQGsOuuu47777+fU089FcuySKfTHH744Xzzm9/MbRMOhzn99NNpampi+vTpnHTSSZimyf33388tt9zCr371KxzHyS2nft111xGLxXJDmxobG2lubs59Yd+cO++8k5tuuomZM2eSTqeZMWNGbsjTvffey+23304qlcL3fW6//fbcQgbtDjvsMP71r38xc+ZMDMPgyCOPZM899+Ttt9/e5PEmTZrEl770Jb785S8TDAaZOHEi48ePZ8WKFbkFFD5t/Pjx3HjjjXznO9/B931s2+aBBx7IDYPckoMOOqhTyPws+2t3zTXXcPPNNzNz5kwymQwHHXRQbuGOTdnc+7x69WpCoRDPP/88d955J+FwmJ///Oe53qD2YX6JRILRo0dz5ZVXdtjvPffcwz/+8Y8OIXflypXcfvvtrF+/nl/96lcd5vK0W7x4Mddeey0PPfQQw4YNo66ubrO1b66+Sy65hNtvv5177rmHQCDAHnvswcqVK/nWt77V6TMBcO6553LYYYdt9jjjxo3j+OOP3+zj3dHe09LeW9Y+lw2yAfO73/0u5513HhMnTuSHP/whM2fOZP/99+dLX/pSbrsZM2bwyiuv8OUvfxnP8zjkkENobGxkwYIFXHbZZey7776d5j5uykUXXcRtt93G8ccfj+M4TJs2jWuvvTb3+OrVqznxxBNJJpNcc801jB07lurqahobG/n5z3/e7cslHH300fzkJz/hoIMOYtmyZbn777zzTm688UaeeeYZ0uk0M2fO5MQTT2TNmjW598v3fVKpFGeccUa3jikisr3Ran4in2NXXXUVEyZMyE1g78o777zDs88+y6233trh/vvuu48RI0Zw4okn9kaZsg20LyTw6ZXnttZVV13FCSecwD777NPh/kMPPTS3ml5/1idb9ukVCUVEZGBQz5TIIDJ+/HhOO+20TvdPnz49N0dHtk+nnXZap95CyPaciYiISM+oZ0pERERERKQHtACFiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA98rhegqK9vxfP6fspXaWmM2tqWPj+u9B218eCgdh4c1M6Dg9p5+9dfbWyaBsXFW39JDBlcPtdhyvP8fglT7ceW7ZvaeHBQOw8OaufBQe28/VMby0DTq8P8Zs2axdFHH82RRx6Zu5r6xubOnctJJ53Escceyze+8Q2ampp6sxwREREREZFtptfCVGVlJXfddRe//e1vee6553jqqadYsmRJh21uueUWLrvsMv785z+z44478vDDD/dWOSIiIiIiIttUr4Wpt956i3333ZeioiKi0SjTp0/npZde6rCN53m0trYCkEgkCIfDvVWOiIiIiIjINtVrYaqqqory8vLc7YqKCiorKztsc9VVV3HNNddw4IEH8tZbb3Hqqaf2VjkiIiIiIiLbVK8tQOF5HoZh5G77vt/hdjKZ5Ac/+AGPPvoo06ZN49e//jXf+973ePDBB7f6GKWlsW1ac3eUl+f327Glb6iNBwe18+Cgdh4c1M7bP7WxDDS9FqaGDh3Ke++9l7tdXV1NRUVF7vaiRYsIhUJMmzYNgK9+9avcc8893TpGbW1Lv6zqUl6eT3V1c58fV/qO2nhwUDsPDmrnwUHtvP3rrzY2TaNfT+DLwNZrw/z2339/3n77berq6kgkErzyyiscfPDBucfHjBnD+vXrWbZsGQCvv/46u+yyS2+VIyIiIiIisk31Ws/UkCFDuPzyyznrrLPIZDKcfPLJTJs2jfPPP5/LLruMXXbZhR//+Md8+9vfxvd9SktL+dGPftRb5YiIiIiIiGxThu/7n9urn2mYn/QWtfHgoHYeHNTOg4PaefunYX4yEPXqRXtFRERERES2VwpTIiIiIiIiPaAwJSIiIiIi0gMKUyIiIiIiIj2gMCUiIiIiItIDClMiIiIiIiI9oDAlIiIiIiLSAwpT3eD7Pg1/m43T0tLfpYiIiIiISD9TmOqG1CfLqXricRbf+/P+LkVERERERPqZwlQ3eJkMAE6zrrAuIiIiIjLYKUyJiIiIiIj0gMKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwlR3+H5/VyAiIiIiIgOEwlRPGEZ/VyAiIiIiIv1MYUpERERERKQHFKZERERERER6wO7Nnc+aNYsHHngAx3H42te+xhlnnJF7bP78+Vx11VW523V1dRQWFvLCCy/0ZknbhuZOiYiIiIgMer0WpiorK7nrrrt45plnCAaDnHrqqeyzzz6MHz8egClTpvD8888DkEgkOOWUU7j++ut7q5xtQ3OlRERERESkTa8N83vrrbfYd999KSoqIhqNMn36dF566aVNbvvLX/6Svfbaiz333LO3yhEREREREdmmeq1nqqqqivLy8tztiooKPvzww07bNTc38/TTTzNr1qxuH6O0NPaZauyuxqoIq9t+Li/P79NjS99TGw8OaufBQe08OKidt39qYxloei1MeZ6HsdGwON/3O9xu9+c//5nDDz+c0tLSbh+jtrYFz+u7+Uvx+nju5+rq5j47rvS98vJ8tfEgoHYeHNTOg4PaefvXX21smkafn8CXz49eG+Y3dOhQqqurc7erq6upqKjotN1rr73G0Ucf3Vtl9A7NnRIRERERGfR6LUztv//+vP3229TV1ZFIJHjllVc4+OCDO2zj+z5z585l9913760yREREREREekWvhakhQ4Zw+eWXc9ZZZ3H88cczY8YMpk2bxvnnn89HH30EZJdDDwQChEKh3ipDRERERESkV/TqdaZmzpzJzJkzO9z30EMP5X4uLS1lzpw5vVmCiIiIiIhIr+i1nikREREREZHtmcKUiIiIiIhIDyhM9YTfd8uxi4iIiIjIwKQwJSIiIiIi0gMKUz2h60yJiIiIiAx6ClMiIiIiIiI9oDAlIiIiIiLSAwpTIiIiIiIiPaAwJSIiIiIi0gMKUyIiIiIiIj2gMCUiIiIiItIDClPdoYv1ioiIiIhIG4WpntB1pkREREREBj2FKRERERERkR5QmOoJDfcTERERERn0FKa6Q8P7RERERESkjcKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTHWHFp4QEREREZE2ClM9oYUoREREREQGPYUpERERERGRHlCYEhERERER6QGFKRERERERkR5QmBIREREREekBhame0Kp+IiIiIiKDnsJUd2gVPxERERERaaMw1R3qkRIRERERkTYKUz2hHioRERERkUFPYUpERERERKQHFKZERERERER6QGFKRERERESkBxSmREREREREekBhSkREREREpAcUpkRERERERHpAYUpERERERKQHFKZERERERER6QGFKRERERESkBxSmREREREREekBhSkREREREpAcUpkRERERERHpAYUpERERERKQHejVMzZo1i6OPPpojjzySJ598stPjy5Yt48wzz+TYY4/lvPPOo7GxsTfLERERERER2WZ6LUxVVlZy11138dvf/pbnnnuOp556iiVLluQe932fiy66iPPPP58///nPTJkyhQcffLC3yhEREREREdmmei1MvfXWW+y7774UFRURjUaZPn06L730Uu7xuXPnEo1GOfjggwG48MILOeOMM3qrHBERERERkW3K7q0dV1VVUV5enrtdUVHBhx9+mLu9cuVKysrK+P73v8/8+fMZO3Ys1157bbeOUVoa22b1bo2GdRFWt/1cXp7fp8eWvqc2HhzUzoOD2nlwUDtv/9TGMtD0WpjyPA/DMHK3fd/vcNtxHP7973/zxBNPsMsuu3D33Xdz6623cuutt271MWprW/A8f5vWvSXxxkTu5+rq5j47rvS98vJ8tfEgoHYeHNTOg4PaefvXX21smkafn8CXz49eG+Y3dOhQqqurc7erq6upqKjI3S4vL2fMmDHssssuAMyYMaNDz5WIiIiIiMhA1mthav/99+ftt9+mrq6ORCLBK6+8kpsfBbD77rtTV1fHggULAJg9ezY777xzb5UjIiIiIiKyTfXaML8hQ4Zw+eWXc9ZZZ5HJZDj55JOZNm0a559/Ppdddhm77LILP//5z7nmmmtIJBIMHTqU22+/vbfKERERERER2aZ6LUwBzJw5k5kzZ3a476GHHsr9vOuuu/LHP/6xN0sQERERERHpFb160V4REREREZHtlcKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMdYfv93cFIiIiIiIyQChMiYiIiIiI9IDCVHcYRn9XICIiIiIiA4TClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEyJiIiIiIj0gMKUiIiIiIhIDyhMdYeuMyUiIiIiIm0UpnrA0BLpIiIiIiKDnsKUiIiIiIhIDyhMiYiIiIiI9IDClIiIiIiISA8oTPWAr4UoREREREQGPYWp7tDCEyIiIiIi0kZhSkREREREpAcUprpDw/tERERERKSNwlQP6DpTIiIiIiKiMCUiIiIiItIDClPd0L6Kn+86/VyJiIiIiIj0N4WpbvDq1wKQrlnVz5WIiIiIiEh/U5jqFi/7hxaiEBEREREZ9BSmukULT4iIiIiISJbClIiIiIiISA8oTImIiIiIiPSAwpSIiIiIiEgPKEx1S9ucKa0/ISIiIiIy6ClMiYiIiIiI9IDClIiIiIiISA8oTImIiIiIiPSAwlSPaNKUiIiIiMhgpzDVLQpRIiIiIiKSpTDVE0Z/FyAiIiIiIv1NYao7DC2NLiIiIiIiWb0apmbNmsXRRx/NkUceyZNPPtnp8Z/97GcccsghHHfccRx33HGb3EZERERERGQgsntrx5WVldx1110888wzBINBTj31VPbZZx/Gjx+f2+bjjz/mpz/9KbvvvntvlSEiIiIiItIreq1n6q233mLfffelqKiIaDTK9OnTeemllzps8/HHH/PLX/6SmTNncuONN5JKpXqrHBERERERkW2q13qmqqqqKC8vz92uqKjgww8/zN1ubW1lypQpXHnllYwZM4arrrqK+++/n8svv3yrj1FaGtumNXfFz4/kfi4vz+/TY0vfUxsPDmrnwUHtPDionbd/amMZaHotTHmeh2FsWPbO9/0Ot/Py8njooYdyt88991y+//3vdytM1da24Hl9txpES0sy93N1dXOfHVf6Xnl5vtp4EFA7Dw5q58FB7bz96682Nk2jz0/gy+dHrw3zGzp0KNXV1bnb1dXVVFRU5G6vXbuWP/7xj7nbvu9j272W7bYNreInIiIiIiJtei1M7b///rz99tvU1dWRSCR45ZVXOPjgg3OPh8Nh7rjjDlatWoXv+zz55JMcccQRvVWOiIiIiIjINtVrYWrIkCFcfvnlnHXWWRx//PHMmDGDadOmcf755/PRRx9RUlLCjTfeyEUXXcRRRx2F7/ucc845vVWOiIiIiIjINtWr4+pmzpzJzJkzO9y38Typ6dOnM3369N4sQUREREREpFf06kV7RUREREREtlcKUyIiIiIiIj2gMCUiIiIiItIDClPdsdF1skREREREZHBTmBIREREREekBhSkREREREZEeUJjqEb+/CxARERERkX6mMNUtmjMlIiIiIiJZXYapCy+8sMPtt99+mxNPPLHXChIREREREfk86DJMWZbFd7/7XWpqavjud7/Ltddey7nnntsXtYmIiIiIiAxYXYapn//85+y3336cdNJJjBkzhr/+9a/MmDGjL2obeDTKT0RERERE2thdbXDzzTfj+z5NTU00NTVx2223AXDNNdf0enEiIiIiIiIDVZdhqqioCIDzzjuvt2sZ+LSIn4iIiIiItOkyTF166aW0trYyd+5cHMdh2rRpxGKxvqhNRERERERkwOoyTH344YdcfPHFlJWV4boulZWV/OIXv2CPPfboi/pEREREREQGpC7D1G233cadd97JvvvuC2SXRr/11lt5+umne704ERERERGRgarL1fxaW1tzQQpgv/32I5FI9GpRA57mTomIiIiIDHpdhinDMFizZk3u9urVq7Esq1eLGrAMrY0uIiIiIiJZXQ7zu+SSS/jqV7/Kfvvth2EY/POf/+S6667ri9oGHmUpERERERFp02WY2muvvXj88cf517/+hed5fOMb32DcuHF9UdsApnF+IiIiIiKDXZdh6uyzz+bZZ59l7NixfVHPwKYMJSIiIiIibboMU47j0NjYiO93TBLtF/MdlDTcT0RERERk0OsyTC1evJh99923Q5gyDIP58+f3amEDk1KUiIiIiIhkdRmmJk+ezHPPPdcHpXx++BruJyIiIiIy6HW5NLpsRB1TIiIiIiLSpsswpV4pERERERGRzroc5jdz5sxN3j9r1qxtXoyIiIiIiMjnRZdh6tprr+2LOkRERERERD5XugxTe++9NwDz58/nW9/6FslkkltuuaXXCxMRERERERnIugxT7e6++26uvPJKCgsLufHGGznooIN6sy4REREREZEBbavDVGVlJUcccURv1iIiIiIiIvK5sdVLoxvGhnXBA4FArxQjIiIiIiLyedFlz9Tuu++OYRgkk0n22GMPfN8nnU73RW0iIiIiIiIDVpdh6oUXXuiLOkRERERERD5XNjvMb9WqVQCMGDGCTCbD3/72N2bPno3neYwYMaLPChQRERERERmINhumfvjDHwIwe/ZszjjjDP73v//x/vvvc/LJJ/Paa6/1WYEiIiIiIiID0WaH+TU2NgLws5/9jN///veMGjUKgKVLl3LZZZdx+OGH902FA4nn93cFIiIiIiIyQGy2ZyoYDAKQyWRyQQpg3LhxHVb2G4wG96sXERERERHYQpjKz8+noaGB4cOH8/bbb+fuf/fdd4lEIn1S3MClHioRERERkcFus8P8vvnNb/L1r3+dHXfckXPPPZfx48cTCASoq6vjvvvu68saRUREREREBpzNhqlp06bxm9/8hv/+978cfPDBAJSVlbH77rsTDof7rMCBxd/o/yIiIiIiMpht8TpTkUiEJ598ktNOO40DDjigr2oauAb5XDEREREREdlgs3Om2h155JE88MADTJ8+nYcffpiGhoat3vmsWbM4+uijOfLII3nyySc3u93f/vY3Dj300K3er4iIiIiISH/bYs8UwLHHHsuxxx7L0qVL+dOf/sTJJ5/M7rvvzplnnsm0adM2+7zKykruuusunnnmGYLBIKeeeir77LMP48eP77BdTU0Nt91222d/JSIiIiIiIn2oy54pAM/zWLFiBZ988gmu61JaWsr111/Pvffeu9nnvPXWW+y7774UFRURjUaZPn06L730UqftrrnmGi699NKev4K+5Psb/yEiIiIiIoNYlz1T7b1Lo0aN4vTTT+eee+4hEAgQj8c55JBDuOyyyzb5vKqqKsrLy3O3Kyoq+PDDDzts8/jjj7PTTjux66679qj40tJYj57XU34su/BGxnEpL8/v02NL31MbDw5q58FB7Tw4qJ23f2pjGWi6DFN1dXU89NBDTJ48ucP90WiUn/zkJ5t9nud5HS7u6/t+h9uLFi3ilVde4dFHH2X9+vU9qZ3a2hY8r++6iZpbktkffKiubu6z40rfKy/PVxsPAmrnwUHtPDionbd//dXGpmn0+Ql8+fzoMkzddNNNm33swAMP3OxjQ4cO5b333svdrq6upqKiInf7pZdeorq6mpNOOolMJkNVVRWnn346v/3tb7e29r6n4X0iIiIiItJmq+ZM9cT+++/P22+/TV1dHYlEgldeeSV3vSqAyy67jJdffpnnn3+eBx98kIqKioEdpAB8r78rEBERERGRAaLXwtSQIUO4/PLLOeusszj++OOZMWMG06ZN4/zzz+ejjz7qrcP2KnVMiYiIiIhIuy6H+X0WM2fOZObMmR3ue+ihhzptN3LkSGbPnt2bpYiIiIiIiGxTmw1TnudhmiaHHnpoh4Uj2r3++uu9WthApJ4pERERERFpt9kwddVVV3H77bdz4IEH8sYbb3DllVcyduzYvqxt4NEFpkREREREpM1mw9Ty5csBuPHGG3nvvfe45ZZbOOyww7jwwgux7V4dHThgKUuJiIiIiEi7zS5AUVxcnPt5zz335Omnn8YwDE455RQ++OCDPilORERERERkoNpsF9OPf/xjgE4LSFRXV/P//t//Y968eb1bmYiIiIiIyAC22TBVWloKwLXXXttnxQx0vsb5iYiIiIhImy4nP21qJT8RERERERmYPM9j1apVtLa2as7/Z2AYkJeXx6hRozDNTc+O6jJMnXXWWRQWFlJeXt7h/lmzZm2bKj9H9FkUERERkYGupqYGx/EYOnQUhrHZJRKkC77vUVdXQ01NDRUVFZvcpssw9eSTT3LzzTdzyCGHcOGFFxIIBLZ5oSIiIiIism3U1dVTWjpEQeozMgyTwsJi6uoqNxumunyH99hjD55++mls2+YrX/kK77333jYv9PPC99Q3JSIiIiIDm+u6WNbgvJTRtmZZNo7jbvbxLt/luXPnAnDwwQczevRorrjiCg4++GBuvPHGbVeliIiIiIhsM1r3YNvo6n3sMkx985vf7HDbNE3mzJnz2ar63PI/9aeIiIiIiAxWXYap2bNn90UdnwuKUCIiIiIi0q7LMHXzzTdv8v5rrrlmmxcz4PnqLhURERER6a66ujq+9rXTmTXrJerr67nhhmu5++6f9UstjY2NnH76KfzlL6985n11uQBFUVERRUVFvPTSS7mfi4qKPvOBP4/UMyUiIiIi0n3z589l8uQpABQXF2+TIOV5Hn4PLqQ1f/5cpkzZ6TMfH7aiZ+rSSy8F4LXXXsv9PHgpTomIiIiIdNf8+fNyAea+++6mtLSM00//f9xzz09JJpNUV1exePEixo4dxx133IVtbzqm3Hff3TQ1NVFVtZ7169ezww47csQR0zn88CMBuPnm69l1192YOfN44vE4Dz54Px988AGZTJqxY8dxyy23MX/+PAoKCrnssotZu3Y1kyZN4YYbbtnsMbdkq5+hFUE20DshIiIiIp8X//xwLW/+d22v7Pvg3YZz4LThXW43f/48TjrpKwAsXLiAc875OgCLFi2gqKiYH/3odmzb5tRTT2L58mVMmDBxk/tZuHABtm1z220/IRyOcNJJx3Lppd/q8PhXvnIavu/zve99l6lTd+Gxx57EMAyqq6sBWLBgPul0mjvuuAvLsrjwwvN4882/ceihh3f79W/1nKn169d3mD81GOdM6TpTIiIiIiLdt3Dh/FzP1JIli5g0aRIAixcv4vHHf0cwGATAcRwKCws3u5/Fixfx0EOPEg5HaG5uprGxgZEjRwGQTqdZs2Y1Y8eO5d//foeGhnouuOCiXKdQeXk5kA1TDzzwEKFQCIAJEyZRV1fXo9fVZZhqnx91xhln9OgAIiIiIiLSfw6ctnW9R72luroa27YpLi5m7dq1xGIxYrF81q5dQzSax9ChwwBobm4mkUhQUTGEVCrFmWeeyiGHHMrChQv4+tcvpKSklEgkzOjRo4FsQJswYVIuLM2bN5fRo8dg2wEWLlzAtGm7dhpdV1dXRyqVZPjwEbn75s37mBkzju3Ra9vqOVMbe+ONN3juuefYa6+9GDFixCaetb1Sz5SIiIiISHdkF5/I9kotXDifSZOmtP28oMNCEAsWzGPSpMltz5nHHnt8gYsu+ibvvfdv3n33HXbYYcfcfgDq6+spKCgAwHEyPPbYI7nnl5eX8dZb/8BxHGzbpra2htLSMubPn0tLSwvr169j6NBh/PGPT1NUVMTOO0/t0WvrMkxdeOGFne57//33+drXvsbUqT076OdVDxYLEREREREZ1BYs2DDEb9GihbnAs2jRwtwKf+3btT/20Uf/Y6edsllj4cIF7LLLNN5//70O4Wvvvffhd797gm9/+xKGDRuBaZq5oHbEEUfx/vvvcdppJxMOhxk9egy33HIbCxbM56STTuGGG66lvr6eiRMncfPNt/X4tRl+F+sJHnLIIVx22WW5277v87Of/WxAXMy3trYFrw/nMa177S80//4PmPkm4+96pM+OK32vvDyf6urm/i5DepnaeXBQOw8OauftX3+1sWkalJbG+vy4n8XcufMYPnxMf5fxmXzve9+lomIIgUCAWCzGueee32+1rF27gp133vRS6ls1Z+qEE07ocN9vfvObbVPZ5416pkREREREel06nea73/2//i6jS11etDeTyVBXV0c6ne6LekREREREZJC76677+ruErdJlz9TkyZP54Q9/yPr160kmk+y99940NTX1RW0Djq9rbYmIiIiISJsuw9Sdd96Z+zmdTvP666/zl7/8hauvvprTTjuNadOm9WqBA4rvbfjR93UhYxERERGRQazLMAXw4YcfMm/ePE488USGDh3Kww8/TDweZ+TIkb1d38BkZFf2U5YSERERERm8upwz9ac//Ymrr76aX/3qVzQ3N3PxxRczb9489t57b0pKSvqixgFj43UPW/7zPm6zVg0SERERERmsugxTTzzxBE899RSxWIzS0lKeeeYZHnvssb6obcBpD1O+47P+gZ+x5uf39m9BIiIiIiLSb7oMU6ZpEottWFt/2LBhWJbVq0UNXG1pqm3qVKa6qv9KERERERGRftVlmCoqKmL+/Pm5xRb+/Oc/U1hY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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_int_only.mean_regret, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_int_only.mean_regret, label=\"$linucb$\")\n",
    "plt.plot(exp_random_int_only.mean_regret, label=\"$random$\")\n",
    "plt.plot(exp_ucb_int_only.mean_regret, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Среднее значение потерь для различных алгоритмов\")\n",
    "plt.ylabel(\"Средний убыток\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "id": "57dc4271",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(np.cumsum(exp_lin_prucb_int_only.cumulative_reward), label=\"$lin_prucb$\")\n",
    "plt.plot(np.cumsum(exp_lin_ucb_int_only.cumulative_reward), label=\"$linucb$\")\n",
    "plt.plot(np.cumsum(exp_random_int_only.cumulative_reward), label=\"$random$\")\n",
    "plt.plot(np.cumsum(exp_ucb_int_only.cumulative_reward), label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Накопленное значение награды\")\n",
    "plt.ylabel(\"Награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "id": "78fdefc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb_int_only.accuracy, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb_int_only.accuracy, label=\"$linucb$\")\n",
    "plt.plot(exp_random_int_only.accuracy, label=\"$random$\")\n",
    "plt.plot(exp_ucb_int_only.accuracy, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.ylabel(\"Точность\")\n",
    "plt.title(\"Точность работы алгоритмов\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c81f253",
   "metadata": {},
   "source": [
    "### Без полиномов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "id": "58c76950",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAAHwCAYAAABDrzX1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAACFWklEQVR4nOzdd5wU9eH/8dfMbL/ejy4HCKig0Vhi78aCPQY1mpjEbowmPzVGjBW7X1uqJsaWWGI3GnvUKHaswNE7XO+3fWZ+f+zdegcHx60cB9z7+Xj4cHfqZ3bujn3Ppxmu67qIiIiIiIhIn5gDXQAREREREZEtkcKUiIiIiIhIBhSmREREREREMqAwJSIiIiIikgGFKRERERERkQwoTImIiIiIiGTAM9AFEJFvvPbaa/zhD38AwLZtpk6dyqmnnjrApRIRERGRnihMiWwmVqxYweWXX87jjz/OmDFjaGpq4uijj2by5MlMmjRpoIsnIiIiImtQmBLZTAQCAW6//XbGjBkDQH19PY7j4Pf7ARg/fjzvv/8+hYWF3d4HAgGuvvpqli5dSlNTE1lZWdx22218/vnnvPLKK/zlL38B4Omnn06/b21tZfr06cybN49EIsH3vvc9Lr30UjwezzrP89Zbb3U73s9+9jPi8TgPP/zweo/XVXt7O9dffz0zZ87EsiwOPvhgLr74Yi6//HL8fj+VlZXU19ez1157MW3aNLxeLwsXLmT69Ok0NTVh2zannXYaJ554IgC//vWvqaysxOPx0NzczPjx4/nLX/7CPffcQ2NjI7/73e8Aur2vrq7m2muvZfXq1SQSCY488kjOOeccAGbOnMltt91GJBLBNE0uuOACDjjggLXuVV/vRUVFBaeddhorV64kJyeHIUOGcOihh/Lyyy/jOA6rVq2irKyMm266ibKyMj7//HNuvfVW4vE4tbW17Lnnntxwww0AvPfee1x22WUUFRUBUFlZmS7LmuWCVEifMmUKn3322VrXsWTJEn74wx9SXl4OwMKFC3n00UeZNGkS99xzD//4xz8oKytLH+eKK67g+OOP57bbbuPll18mFAoRi8VIJBK8+eab3Y794YcfcttttzF06FAWLVpEIBDgpptuYsyYMSxevJhrr72W9vZ2amtrmTBhAnfeeSeGYfDb3/6WL774AoAzzzyTk046iQ8//JAzzzyT0aNHA9DQ0MBee+3FTTfdxIEHHshdd93FpEmTmDlzJqeccgoPPvggzzzzDOPGjeNnP/sZAL/5zW/S79d1/+bPn891113Hv//9727X0vm786c//YkzzjiD7bffnksvvZQZM2bwm9/8hqeffpri4uL09o7jcMMNN/DFF1/Q3t6O67pcf/317LLLLqxYsYJDDjmEbbfdFoDW1laGDRvGww8/vNbPyK233so111xDZWUlhmGwzz778Ktf/QqPx8N2223HmWeeyf/+9z/C4TC/+tWvOPTQQ7v9nnf9Pb300kuZNm0a4XCY6upqRo8ezfDhw7n88ss56KCD2Guvvbj//vsB+OSTTzj11FO54IIL+MUvfsH8+fO59tpraWpqwjAMfvrTn3Lsscd2uy+RSIS8vDz+8Ic/UFpautbPmojI1kp9pkQ2E8XFxey3334AHHbYYRx55JHstNNOjB07dr37vfPOO+Tm5vL444/zyiuvsMMOO/CPf/wDy7KwbbvHfW644Qa23357nn76aZ599lkaGxv5+9//vsFlff7555k7d26fj3f33XcTi8V46aWXePbZZ5k5cyYfffQRAF9++SX3338/L730EgsXLuTxxx8nmUxy4YUX8utf/5qnn36aRx55hPvvv5/PP/8cgGg0ygMPPMBzzz3HhRdeuEFlv+SSSzjhhBN4+umnefLJJ5kxYwYvvfQSzc3NXH755dxyyy0888wz/PGPf+Tqq69m1apVG/y5rOtedLr00kt57rnn+POf/wzAxx9/zBVXXMFLL73E9ttvz/Tp0wF46KGHuPDCC/nXv/7Fiy++yJtvvsnXX38NQCQS4fTTT+e5557jueee2+Cy9SQajXLYYYelj7Xml+Ajjjgive673/0uAPPmzeOpp57i3//+N88//zy33XbbOo//9ddfc9ppp/HCCy9w/PHHc8kllwDwxBNPcOyxx/LEE0/w6quvsmLFCt566y1qamrYcccdefXVV7n22mvTnxPAyJEj02X5yU9+sta5EokE1113HXl5eQDr/fnPlGma3HrrrTz33HO8/vrr/OY3v+H222/vFqQAvvjiC2pqanj88cd56aWXOO6447jvvvvS6wOBQPpaLr300m77dv0Zuf7668nPz+eFF17gqaeeYu7cuenAY9s2wWCQp59+mjvvvJPf/va3NDQ0dDtW19/TSZMm8dxzz3H99denP8vOJsWhUIjVq1en93/22WcZPnw4AMlkknPPPTd9H++77z7+7//+Lx3OO4/16quvMmbMGB577LGN9XGLiGwRVDMlshl65ZVXWL58OWeccQb33XcfZ599NgA//vGPMc3uz0C+//3vM2LECB5++GGWLl3KRx99xHe+8x0qKiqYNWsWq1evZsiQITQ2Nqb3eeutt/jqq6948skngdSX6q56Ok+npqYm/vznP3Peeefxn//8Z4OO12nGjBlcfvnlWJaFZVk88sgjADzzzDMcd9xxZGVlAXDMMcfwxhtvsMcee7Bs2TJ++9vfpo8RjUaZPXs2O+20E1VVVeTm5vZ4rpdeeolPP/0UgLq6Og477DDC4TAff/wxzc3N3HXXXQCEw2EqKyvJysqitraW888/P30MwzCYO3cuQ4cOXev4fbkX67LXXnula1tOOukkjjnmGABuuukm3nnnHf785z+zaNEiYrEY4XAYgNWrV6/zmruWKy8vj3PPPZcRI0asc9tVq1alw8eGys7OxrZtGhoaevxcupowYUI6hJ1wwglce+21NDY2cskll/Dee+9x3333sWTJEmpqagiHwwwfPpzTTjuNq666iueee44f//jHG1yu++67j/3335/XXnsNgIqKCt555x1OP/10TNOktbW12/br+hlftmxZ+j6MGjUqHQA7lZaWct1113Heeefxi1/8gl133XWtY3znO98hLy+Pxx57jOXLl/Phhx+mf7b74p133uHRRx/FMAx8Ph9Tp07lwQcf5KyzzgLgRz/6EZD6nLfddls+/vjj9L49/Z6uz6GHHsprr73GMcccwyeffMJee+0FpGovY7EYhx56KABlZWUceuih/O9//2P33XdP7++6Lg0NDUyYMKHP1ykisiVTmBLZTHzyySfMmDEjXcMyYsQIDj744G7Nsx588MFuTZMA/vnPf/LEE09w6qmnMmXKFPLz81mxYgWTJk3iJz/5CT/5yU/IysrCcZx0ky3HcbjrrrvSTQpbWlowDGO95+l088038/Of/5xQKJRe1tvxOnk8nm7LV69eTSAQAFI1CZ1c18U0TWzbJicnp1sNTF1dHTk5OcRiMSKRSLoZ5JqOOOKItZr5OY6D67o89thjBINBINVkzO/38+GHHzJmzBj+9a9/pY9RXV3drclcV325F+vS9Zodx0m//9GPfsT48ePZZ599OPzww/niiy9wXReA2bNnc+yxx67zmJ3l6qwVeuqpp9a57ezZs9Nhric93cOhQ4dy5ZVXcvLJJ+M4Trefg/VdX9dlv/rVr7Btm8MPP5z999+f1atX47outm0TiUS45pprOOusszjiiCPSzfR6KkunpUuX8sorr/Cvf/0rHaZOPvlk5s2bxzHHHENeXh51dXXsvPPO6X3W9TPeWdMC8Pe//50rr7ySo48+utv5FixYQHFxMV9++WWP5XnrrbeYPn06Z5xxBgcddBAVFRU8//zz6yz/ujiO0+26HcchmUym36/r5wd6/j1dnyOOOIIbb7yRrKwsDjjgAGKxGJCqAVvzs3ddN12OzvAZDoepqqriV7/6VZ+vU0RkS6ZmfiKbiREjRvDII4/w/vvvA9DY2Mg777zDHnvssd793n33XY477jh+8IMfMHr0aN58881086azzz6bV155haeffprTTz89vc/ee+/NAw88gOu6xONxzj333HQt0frMnj2b1atXc/zxx3dbvqHH+973vsczzzyD4zjE43EuvPDC9NP0//znP8TjcWKxGM888wwHHHAAo0ePTjeJglT4Ouqoo/j6669588032W233Xotc1fZ2dnstNNO6SaILS0tnHzyybzxxhvstNNOLF26NF2eOXPmcNhhh1FdXb3Bx1/fvejJBx98kD7+Y489xgEHHEBLSwtfffUV/+///T8OPfRQqqqqWLZsGY7jEIlEmDlzJjvttFOvZcnLyyORSKzz/K7r8vrrr6drINaUTCbX6vPWqaGhgYKCAl588cX1NvOrrKyksrISgMcff5zvfOc75Obm8u6773L++edzxBFHAKlmcbZt8/DDD/PrX/863YTNNE3a29vXWxaAW265hSuuuAKfz5deFgqFuPnmm3nllVd44okn+vyzApCfn79WLeuXX37JQw89xFNPPUVraysPPvjgWvu99957HHDAAZxyyinssMMOvP766+n7kEwm8Xq9G3T+vffem0ceeST9e/XEE0+w5557ptc/++yzAMyaNYvFixena8nW9Xu6PuPHj6e+vp4HHniA4447Lr28oqICj8fDq6++CqQeMLzyyivpcnSGz9dee43f/e53XHvttRt8ThGRrYFqpkQ2E2VlZfzpT3/i1ltv5YYbbsBxHI488shuIagnP/3pT/nd736XbmK30047MW/evPXuc8UVVzB9+nSmTJlCIpFgzz335Oc//3mvZWxububqq6/O+HgXXHAB06dP55hjjsG2bY444ggOPfRQ3nzzTQKBAKeccgotLS0cdthhnHDCCZimyR//+EemT5/OX//6V5LJJL/85S/x+XxcddVVZGdnp5tkNTc309rayhtvvLHea7jtttu47rrrmDJlCvF4nKOOOipd83D33Xdzyy23EIvFcF2XW265Jd13ZEP09V6UlZVxySWXUFtby9ixY7n22mvJzc3lrLPO4rjjjiMUClFWVsbOO+/M0qVL+f3vf09tbS0nnXRSt+Pceuut3HjjjUCq+ZrruiQSCa699tp0DdyaLrvsMhYuXJhuMgZQU1PDLbfcwg477MALL7yQ7sPV1fvvv8+f//xn/vWvf623uSGk+gHeeeedrFy5ksLCQm655RYALr74Ys4//3xCoRDZ2dnsuuuuLFu2jAsuuICvvvoqHbIuuOACPvvsM2666ab0oCM92WeffTIKSz3prGlJJBL4/X6uueYaFixYAEBbWxu/+tWvmDZtWnrAkB/84AfsuuuubLfdduljTJ06lV//+tdMmTKFZDLJXnvtxauvvspHH33Eb37zGw466KANKsu0adO4/vrr079X++yzT3qwFEgNmPLEE0/gOA533HFHusnmun5Pe3PYYYfx5ptvpgfHAPB6vfzxj3/k+uuv55577sG2bc4//3z22GMPPvzww/Tn5bousVisW/lERAYDw+1sOyIiMkC6jrS2IT788EOeeeYZbrrppm7L77nnHoYNG9anJ/IDZc1R1zbEgQceuNaoeZ1D6j/88MN9Ov9pp53GjTfeuFZY7Okcmfjwww97HBlPNo6eRm4UEZFNTzVTIrLFGTt2LCeffPJayw877LB11sRsDaZNm7bWssLCQs4777w+H+u8887r8Yt4T+cQERGRnqlmSkREREREJAMagEJERERERCQDClMiIiIiIiIZUJgSERERERHJwBY9AEVjYzuOs+m7fBUVZVNf37bJzyubju7x4KD7PDjoPg8Ous9bv4G6x6ZpUFCQtcnPK1uGLTpMOY47IGGq89yyddM9Hhx0nwcH3efBQfd566d7LJsbNfMTERERERHJgMKUiIiIiIhIBhSmREREREREMqAwJSIiIiIikgGFKRERERERkQwoTImIiIiIiGRAYUpERERERCQDClMiIiIiIiIZUJgSERERERHJgMKUiIiIiIhIBhSmREREREREMqAwJSIiIiIikgGFKRERERERkQwoTImIiIiIiGRAYUpERERERCQDClMiIiIiIiIZUJjqg0Qsyqy7biLa3j7QRRERERERkQGmMNUHy//7Ot6vKql87vmBLoqIiIiIiAwwhak+cB0n9aLz/yIiIiIiMmgpTPWFYQx0CUREREREZDOhMJUB13UHuggiIiIiIjLAFKYyomZ+IiIiIiKDncJUXxj6uEREREREJEXpIBNq5SciIiIiMugpTGVEaUpEREREZLBTmOqLzsH8lKVERERERAY9hak+UJYSEREREZFOClN90TnPlNKUiIiIiMigpzAlIiIiIiKSAYWpTLiaZ0pEREREZLBTmOoDQ/NMiYiIiIhIB6WDvujsMyUiIiIiIoOewlQmNACFiIiIiMigpzCVCVdpSkRERERksFOY6gtTzfxERERERCRFYSoDqpcSERERERGFqUxoaHQRERERkUFPYapP1MxPRERERERSFKZEREREREQyoDDVF53zTGk0PxERERGRQU9hSkREREREJAMKU33R2WVKFVMiIiIiIoOewlRfGEpTIiIiIiKSojAlIiIiIiKSAYWpTGgAChERERGRQU9hqg+Mjo9LUUpERERERBSm+sLQpL0iIiIiIpKiMJUJNfMTERERERn0FKYyoTAlIiIiIjLoKUz1gaFPS0REREREOigeiIiIiIiIZEBhqi86B6BQMz8RERERkUFPYSoDilIiIiIiIqIw1SeqmRIRERERkRSFqb7QPFMiIiIiItJBYUpERERERCQDClOZUCs/EREREZFBT2GqL0z1mRIRERERkRSFKRERERERkQwoTImIiIiIiGRAYSoTrjPQJRARERERkQGmMNUHhmENdBFERERERGQzoTCVCY0/ISIiIiIy6ClMZURpSkRERERksFOY6gsjNTS6opSIiIiIiChM9YUx0AUQEREREZHNhcKUiIiIiIhIBhSmREREREREMqAwlQl1mhIRERERGfQUpvrAMNRpSkREREREUhSmREREREREMqAwJSIiIiIikgGFqYyo05SIiIiIyGCnMCUiIiIiIpIBhSkREREREZEMKEyJiIiIiIhkoF/D1AsvvMARRxzBoYceyj/+8Y+11s+aNYsTTjiBo48+mrPPPpuWlpb+LM5G47rqMyUiIiIiMtj1W5iqrq7mjjvu4J///CfPPvssjz/+OAsWLOi2zfTp07nwwgt5/vnnGT16NH/729/6qzgbh6GKPBERERERSem3dDBjxgz22GMP8vPzCYVCHHbYYbz88svdtnEch/b2dgAikQiBQKC/iiMiIiIiIrJRefrrwDU1NZSUlKTfl5aW8uWXX3bb5je/+Q0//elPueGGGwgGgzzxxBN9OkdRUfZGKeuGasr2E+l4XVKSs0nPLZue7vHgoPs8OOg+Dw66z1s/3WPZ3PRbmHIcB8Mw0u9d1+32PhqNcsUVV/DAAw8wefJk/v73v3PZZZdx7733bvA56uvbcJxN13+ptS2Wfl1b27rJziubXklJju7xIKD7PDjoPg8Ous9bv4G6x6ZpbPIH+LLl6LdmfuXl5dTW1qbf19bWUlpamn4/b948/H4/kydPBuCHP/whH330UX8VZ6Mwet9EREREREQGiX4LU3vuuSfvv/8+DQ0NRCIRXn31Vfbdd9/0+lGjRlFVVcWiRYsAeOONN5g0aVJ/FUdERERERGSj6rdmfmVlZVx88cWcfvrpJBIJTjzxRCZPnsyZZ57JhRdeyKRJk7jxxhu56KKLcF2XoqIibrjhhv4qjoiIiIiIyEbVb2EKYMqUKUyZMqXbsvvuuy/9er/99mO//fbrzyL0D00zJSIiIiIy6GnipL4w1WtKRERERERSFKYyoqopEREREZHBTmFKREREREQkAwpTIiIiIiIiGVCY6gNDM02JiIiIiEgHhSkREREREZEMKEyJiIiIiIhkQGEqE65G8xMRERERGewUpvrCUJ8pERERERFJUZgSERERERHJgMKUiIiIiIhIBhSmREREREREMqAw1QfpeaY0/oSIiIiIyKCnMNUXGn9CREREREQ6KEyJiIiIiIhkQGEqA67a+YmIiIiIDHoKUyIiIiIiIhlQmBIREREREcmAwpSIiIiIiEgGFKYyoj5TIiIiIiKDncJUXxgaG11ERERERFIUpkRERERERDKgMCUiIiIiIpIBhalMuOozJSIiIiIy2ClM9YFh6uMSEREREZEUpQMREREREZEMKEyJiIiIiIhkQGFKREREREQkAwpTfaBZpkREREREpJPClIiIiIiISAYUpkRERERERDKgMCUiIiIiIpIBham+0KclIiIiIiIdFA9EREREREQyoDAlIiIiIiKSAYWpDLiuO9BFEBERERGRAaYw1QeGPi4REREREemgdCAiIiIiIpIBhSkREREREZEMKExlQn2mREREREQGPYWpvjCMgS6BiIiIiIhsJhSmREREREREMqAwJSIiIiIikgGFqUyoy5SIiIiIyKCnMNUHBuozJSIiIiIiKQpTmXCcgS6BiIiIiIgMMIWpDDgffjrQRRARERERkQGmMCUiIiIiIpIBham+0DxTIiIiIiLSQWFKREREREQkAwpTIiIiIiIiGVCY6gu18hMRERERkQ4KUyIiIiIiIhlQmMqQ67oDXQQRERERERlAClOZUpgSERERERnUFKb6wNDHJSIiIiIiHZQOMqWaKRERERGRQU1hKlMKUyIiIiIig5rCVF9oaHQREREREemgMNUHhsKUiIiIiIh0UJjKkIZGFxEREREZ3BSmMqYwJSIiIiIymClMZUpZSkRERERkUFOY6ouunabUzE9EREREZFBTmBIREREREcmAwpSIiIiIiEgGFKYypWZ+IiIiIiKDmsJUHxjdJppSmBIRERERGcwUpjKkiikRERERkcFNYapPNJqfiIiIiIikKExlTGFKRERERGQwU5jqk641UwNXChERERERGXgKUyIiIiIiIhlQmMqU+kyJiIiIiAxqClMiIiIiIiIZUJjqA8PUaH4iIiIiIpKiMJUhVyNQiIiIiIgMagpTmVKWEhEREREZ1BSmMqVmfiIiIiIig5rCVB8YvW8iIiIiIiKDhMJUxlQzJSIiIiIymClMZUpZSkRERERkUOvXMPXCCy9wxBFHcOihh/KPf/xjrfWLFi3itNNO4+ijj+ZnP/sZzc3N/VmcjUxpSkRERERkMOu3MFVdXc0dd9zBP//5T5599lkef/xxFixYkF7vui7nnnsuZ555Js8//zwTJ07k3nvv7a/ibBzGNx/X+safSMTjfPXSv0gk4pugUCIiIiIiMhA8vW0Qj8d5++23aW9vB8C2bZYtW8bFF1+83v1mzJjBHnvsQX5+PgCHHXYYL7/8MhdccAEAs2bNIhQKse+++wJwzjnn0NLS8m2uZdNaT5qqfPVptln1MpWvG0w6/MRNWCgREREREdlUeg1TF198McuXL6e2tpbtttuOL774gt12263XA9fU1FBSUpJ+X1paypdffpl+v2zZMoqLi/ntb3/LnDlzqKio4Morr8zwMgbCN2GqqbYGXyBIKCcHACeSCoVu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eHFGlyAiIiIiWzfHcVi+fDnt7e2bw+DTWyzDgKysLEaMGIFp9tygr9dENGrUKM4991yam5v58Y9/zMKFC/nRj37EY489ttELvKX5unYWTzS+ydPzX+CuA7r3IVvxf7cSXTCfUddOxz902AYdz7VtFl6UmtfLCoUoPu6EbuvbPvsUSPWREhERERHpSV1dHcmkQ3n5CAyj1149sg6u69DQUEddXR2lpaU9btNrmLr99tt59tlnycvL48gjj8QwDH7/+99v9MJuGbr/MM5rXAhA0rW7LU/U1xFdMD/1uq5ug8NU9YP3p183vPjCWmGq9rF/YuXlExwzts8lFxEREZHBoaGhkaKiMgWpb8kwTPLyCmhoqF5nmOr1E25ubuaAAw5g5513ZvXq1axatYrjjz++t922Ut3rSec3LFhri2RTI4sv+3/p93ZL8wYd2YnFaJnxHgCewiIA5v38J7R9+Tmu65KoqwUgMHJkRiUXERERkcHBtm0saxB2yekHluUhmbTXub7XT/nggw8mEAjgui7xeByfz4dhGMycOXOjFnRLYGB0i1NGx/9H5nxT85RoaOi2T/UD95O3977rPW7zO29T/dDf0+9H/e6adHO/VXff2W3bgsMO73O5RURERGRwMQyj942kV719jr3WTG277bbMnDmTzz77jLFjx/LZZ58NyiAFa9ZLgdGxoOtkvk64HQAzFNqwYzpOtyA19IJfYmVnrzM0+TX5roiIiIjIZqHXMOU43wz/XV1dzbx58/q1QFuUjjC1tHU5X9XNBsBuT4WpEb+5grx998fKyUlv7sRizPv5T1j15z8AEK6cQ90zT3U7ZGjCBABKfvBDxtz1B4LjJ6TXFR13AtYGhjQREREREelfvYapeDzO7NmzeeONNxg2bBg///nP+e9//7spyrb5WWNsSaPL26/mv0/ze+9Sdd9fADCDIazsbOz2dlzXpeXD91lw/tkAtH3yMUuuvpIVt91M439eBGDIuRcw+sZbMQPB9DGtrCxGXPIbrJxcAArVxE9EREREtkANDQ1MmfJ9ABobG7moo0vLQGhububIIw/dKMfqtc/UhRdeyE9/+lPy8/O5/fbbicViXHTRRRxwwAEbpQBblDXaTHb2oDIdl+/+7X9U87/0OisYxAyGwHFwY7F0yOoUX7G823v/8BF4S0p6PO2YO+7eGKUXERERERkQc+bM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ptmzZzFy5Cjmzq1k8uQd08u7amhoIBaLMnTosPSy2bO/5qijjt5k5d4QGoBCRERERET6TWNjI7m5uQAkkwkefPB+xo+fQElJMQsXLiCZTAJQX1+X3mfOnFm0tbVRVbUagCeffIL8/Hy2336HTX8B66GaKRERERER6Te77bY7jz76CBdddD5DhgzDNE3Gj5/IIYd8n08//YSTTz6RQCDAyJGj0oNPVFbO4YQTfsA111xJY2Mj2247nuuvv3mAr2RtClMiIiIiItJv8vLyuf/+h3tcN23a1T0u/9nPzurHEm08auYnIiIiIiKSAYUpERERERGRDChMiYiIiIiIZEBhSkRERERkK+O67kAXYavQ2+eoMCUiIiIishUJBgO0tjYrUH1LruvS2tpMMBhY5zYazU9EREREZCsyYsQIli9fzurVywa6KFu8YDDAiBEj1rleYUpEREREZCvi9XqpqKgY6GIMCmrmJyIiIiIikgGFKRERERERkQwoTImIiIiIiGRAYaovDGOgSyAiIiIiIpsJhSkREREREZEMKEyJiIiIiIhkQGFKREREREQkAwpTIiIiIiIiGVCYEhERERERyYDClIiIiIiISAYUpkRERERERDKgMCUiIiIiIpIBhSkREREREZEMKEyJiIiIiIhkQGGqL4yBLoCIiIiIiGwuFKZEREREREQyoDAlIiIiIiKSAYUpERERERGRDChMiYiIiIiIZEBhSkREREREJAMKUyIiIiIiIhlQmBIREREREcmAwpSIiIiIiEgGFKZEREREREQyoDAlIiIiIiKSAYWpPjEGugAiIiIiIrKZUJgSERERERHJgMKUiIiIiIhIBhSmREREREREMqAwJSIiIiIikgGFKRERERERkQwoTImIiIiIiGRAYUpERERERCQDClMiIiIiIiIZUJgSERERERHJgMKUiIiIiIhIBhSm+sAwjIEugoiIiIiIbCYUpkRERERERDKgMCUiIiIiIpIBhSkREREREZEMKEyJiIiIiIhkQGFKREREREQkAwpTIiIiIiIiGVCYEhERERERyYDClIiIiIiISAYUpkRERERERDKgMCUiIiIiIpIBhSkREREREZEMKEyJiIiIiIhkQGFKREREREQkAwpTIiIiIiIiGVCYEhERERERyYDClIiIiIiISAb6NUy98MILHHHEERx66KH84x//WGv966+/zjHHHMPRRx/NeeedR3Nzc38WR0REREREZKPptzBVXV3NHXfcwT//+U+effZZHn/8cRYsWJBe39bWxtVXX829997L888/z/jx47nnnnv6qzgiIiIiIiIbVb+FqRkzZrDHHnuQn59PKBTisMMO4+WXX06vTyQSXHXVVZSVlQEwfvx4Vq9e3V/FERERERER2ag8/XXgmpoaSkpK0u9LS0v58ssv0+8LCgo45JBDAIhGo9x7772cdtppfTpHUVH2xinsBnKSSeZ3vC4pydmk55ZNT/d4cNB9Hhx0nwcH3eetn+6xbG76LUw5joNhGOn3rut2e9+ptbWV888/nwkTJnDcccf16Rz19W04jvuty7qh3GQy/bq2tnWTnVc2vZKSHN3jQUD3eXDQfR4cdJ+3fgN1j03T2OQP8GXL0W/N/MrLy6mtrU2/r62tpbS0tNs2NTU1nHLKKYwfP57p06f3V1FEREREREQ2un4LU3vuuSfvv/8+DQ0NRCIRXn31Vfbdd9/0etu2Oeecczj88MO54ooreqy12uxsCWUUEREREZFNot+a+ZWVlXHxxRdz+umnk0gkOPHEE5k8eTJnnnkmF154IVVVVcyePRvbtnnllVcA2GGHHVRDJSIiIiIiW4R+C1MAU6ZMYcqUKd2W3XfffQBMmjSJysrK/jy9iIiIiIhIv+nXSXtFRERERES2VgpTIiIiIiIiGVCYEhERERERyYDClIiIiIiISAYUpkRERERERDKgMCUiIiIiIpIBhSkREREREZEMKEyJiIiIiIhkQGGqLwxjoEsgIiIiIiKbCYUpERERERGRDChMiYiIiIiIZEBhSkREREREJAMKUyIiIiIiIhlQmBIREREREcmAwpSIiIiIiEgGFKZEREREREQyoDAlIiIiIiKSAYUpERERERGRDChMiYiIiIiIZEBhSkREREREJAMKUyIiIiIiIhlQmJL/3979x1Rd930cf5344XKm3nSBOqDypsbKrdRYSj9QcIPiQGcSKWnWoqKaxabTAnO0Sieei2WStGw1k+XmcmEECdb6sbYgfphYbehcBgYKnZRAkB8n+Fx/dN/nurqW3fip+zqc4/PxF98P33He57wOX/bi+2EAAAAAsECZAgAAAAALlCkAAAAAsECZAgAAAAALlCkAAAAAsECZAgAAAAALlCkAAAAAsECZAgAAAAALlCkAAAAA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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb.mean_reward, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb.mean_reward, label=\"$linucb$\")\n",
    "plt.plot(exp_random.mean_reward, label=\"$random$\")\n",
    "plt.plot(exp_ucb.mean_reward, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Значение среднее награды для различных алгоритмов\")\n",
    "plt.ylabel(\"Средняя награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "id": "46454683",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb.mean_regret, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb.mean_regret, label=\"$linucb$\")\n",
    "plt.plot(exp_random.mean_regret, label=\"$random$\")\n",
    "plt.plot(exp_ucb.mean_regret, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Среднее значение потерь для различных алгоритмов\")\n",
    "plt.ylabel(\"Средний убыток\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "id": "827dab6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(exp_lin_prucb.accuracy, label=\"$lin_prucb$\")\n",
    "plt.plot(exp_lin_ucb.accuracy, label=\"$linucb$\")\n",
    "plt.plot(exp_random.accuracy, label=\"$random$\")\n",
    "plt.plot(exp_ucb.accuracy, label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.ylabel(\"Точность\")\n",
    "plt.title(\"Точность работы алгоритмов\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc72b8cf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ebfd8d1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd2b3259",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "id": "aaf01a87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "plt.plot(np.cumsum(exp_lin_prucb.cumulative_reward), label=\"$lin_prucb$\")\n",
    "plt.plot(np.cumsum(exp_lin_ucb.cumulative_reward), label=\"$linucb$\")\n",
    "plt.plot(np.cumsum(exp_random.cumulative_reward), label=\"$random$\")\n",
    "plt.plot(np.cumsum(exp_ucb.cumulative_reward), label=\"$ucb$\")\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "plt.xlabel(\"Итерация\")\n",
    "plt.title(\"Накопленное значение награды\")\n",
    "plt.ylabel(\"Награда\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfdfc93a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "id": "f53b091f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, sharey=True, figsize=(20,8))\n",
    "axes[2].plot(exp_lin_prucb.mean_reward, label=\"$lin_prucb$\")\n",
    "axes[2].plot(exp_ucb.mean_reward, label=\"$linucb$\")\n",
    "axes[2].plot(exp_random.mean_reward, label=\"$random$\")\n",
    "axes[2].plot(exp_ucb.mean_reward, label=\"$ucb$\")\n",
    "axes[2].set_title('Без степеней')\n",
    "\n",
    "\n",
    "axes[1].plot(exp_lin_prucb_int_only.mean_reward, label=\"$lin_prucb$\")\n",
    "axes[1].plot(exp_lin_ucb_int_only.mean_reward, label=\"$linucb$\")\n",
    "axes[1].plot(exp_random_int_only.mean_reward, label=\"$random$\")\n",
    "axes[1].plot(exp_ucb_int_only.mean_reward, label=\"$ucb$\")\n",
    "axes[1].set_title('Только со взаимодействиями')\n",
    "\n",
    "\n",
    "axes[0].plot(exp_lin_prucb_with_polinomial.mean_reward, label=\"$lin_prucb$\")\n",
    "axes[0].plot(exp_lin_ucb_with_polinomial.mean_reward, label=\"$linucb$\")\n",
    "axes[0].plot(exp_random_with_polinomial.mean_regret, label=\"$random$\")\n",
    "axes[0].plot(exp_ucb_with_polinomial.mean_reward, label=\"$ucb$\")\n",
    "axes[0].set_title('Со степениями')\n",
    "\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "fig.text(0.5, 0.0001, 'Итерация', ha='center')\n",
    "fig.text(0.001, 0.5, 'Среднее значение награды', va='center', rotation='vertical')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5234271",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6df5b4ee",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "841406fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, sharey=True, figsize=(20,8))\n",
    "axes[2].plot(exp_lin_prucb.mean_regret, label=\"$lin_prucb$\")\n",
    "axes[2].plot(exp_ucb.mean_regret, label=\"$linucb$\")\n",
    "axes[2].plot(exp_random.mean_regret, label=\"$random$\")\n",
    "axes[2].plot(exp_ucb.mean_regret, label=\"$ucb$\")\n",
    "axes[2].set_title('Без степеней')\n",
    "\n",
    "\n",
    "axes[1].plot(exp_lin_prucb_int_only.mean_regret, label=\"$lin_prucb$\")\n",
    "axes[1].plot(exp_lin_ucb_int_only.mean_regret, label=\"$linucb$\")\n",
    "axes[1].plot(exp_random_int_only.mean_regret, label=\"$random$\")\n",
    "axes[1].plot(exp_ucb_int_only.mean_regret, label=\"$ucb$\")\n",
    "axes[1].set_title('Только со взаимодействиями')\n",
    "\n",
    "\n",
    "axes[0].plot(exp_lin_prucb_with_polinomial.mean_regret, label=\"$lin_prucb$\")\n",
    "axes[0].plot(exp_lin_ucb_with_polinomial.mean_regret, label=\"$linucb$\")\n",
    "axes[0].plot(exp_random_with_polinomial.mean_regret, label=\"$random$\")\n",
    "axes[0].plot(exp_ucb_with_polinomial.mean_regret, label=\"$ucb$\")\n",
    "axes[0].set_title('Со степениями')\n",
    "\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "fig.text(0.5, 0.0001, 'Итерация', ha='center')\n",
    "fig.text(0.001, 0.5, 'Среднее значение потерь', va='center', rotation='vertical')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb5782cb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16908a52",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "7b2aa378",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, sharey=True, figsize=(20,8))\n",
    "axes[2].plot(np.cumsum(exp_lin_prucb.cumulative_reward), label=\"$lin_prucb$\")\n",
    "axes[2].plot(np.cumsum(exp_lin_ucb.cumulative_reward), label=\"$linucb$\")\n",
    "axes[2].plot(np.cumsum(exp_random.cumulative_reward), label=\"$random$\")\n",
    "axes[2].plot(np.cumsum(exp_ucb.cumulative_reward), label=\"$ucb$\")\n",
    "axes[2].set_title('Без степеней')\n",
    "\n",
    "\n",
    "axes[1].plot(np.cumsum(exp_lin_prucb_int_only.cumulative_reward), label=\"$lin_prucb$\")\n",
    "axes[1].plot(np.cumsum(exp_lin_ucb_int_only.cumulative_reward), label=\"$linucb$\")\n",
    "axes[1].plot(np.cumsum(exp_random_int_only.cumulative_reward), label=\"$random$\")\n",
    "axes[1].plot(np.cumsum(exp_ucb_int_only.cumulative_reward), label=\"$ucb$\")\n",
    "axes[1].set_title('Только со взаимодействиями')\n",
    "\n",
    "axes[0].plot(np.cumsum(exp_lin_prucb_with_polinomial.cumulative_reward), label=\"$lin_prucb$\")\n",
    "axes[0].plot(np.cumsum(exp_lin_ucb_with_polinomial.cumulative_reward), label=\"$linucb$\")\n",
    "axes[0].plot(np.cumsum(exp_random_with_polinomial.cumulative_reward), label=\"$random$\")\n",
    "axes[0].plot(np.cumsum(exp_ucb_with_polinomial.cumulative_reward), label=\"$ucb$\")\n",
    "axes[0].set_title('Со степениями')\n",
    "\n",
    "plt.legend(bbox_to_anchor=(1.2, 0.5))\n",
    "fig.text(0.5, 0.001, 'Итерация', ha='center')\n",
    "fig.text(0.001, 0.5, 'Накопленное значение награды', va='center', rotation='vertical')\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2e0a3db",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
